{"version":3,"sources":["PreviewPane.js","Sliders/components.js","Sliders/BarChart.js","Sliders/RangeSlider.js","Sliders/Sliders.js","SliderPane.js","QueryFilter.js","FilterPane.js","InfoFields.js","InfoPane.js","ViewPane.js","MappingsPane.js","Export.js","Projection.js","Layout.js","Data.js","App.js","serviceWorker.js","index.js"],"names":["PreviewPane","Component","constructor","props","super","this","state","dimensions","imgURL","previewImage","timeoutId","componentDidMount","setPreviewPaneCanvas","side_canvas","componentDidUpdate","prevProps","hover_index","setState","clearTimeout","setTimeout","render","previewPane_image_size","_jsxs","children","style","position","width","height","textAlign","_jsx","display","verticalAlign","setPreviewImage","ref","React","memo","thumbHeight","MuiRail","withStyles","theme","rail","backgroundColor","palette","grey","pointerEvents","railHotspot","top","cursor","_ref","classes","getRailProps","Fragment","className","MuiHandle","root","secondary","main","marginLeft","marginTop","border","borderRadius","whiteSpace","zIndex","_ref2","domain","min","max","handle","id","value","percent","getHandleProps","role","left","MuiTrack","track","trackHotspot","_ref3","source","target","getTrackProps","MuiTickComponent","_ref4","tick","count","format","Typography","label","variant","defaultProps","d","BarChart","isHovering","barSelected","onLeave","bind","calculateHistogram","normalize","data","i","settings","currentProjection","push","metadata","sliderID","buckets","bucketsFinder","stepSize","targetBucket","Math","abs","length","bucketCount","parseFloat","toFixed","bucketList","Object","values","ratio","apply","round","barDataValues","hoverEffect","chartElement","barID","index","arr","Float32Array","fill","prevArr","barData","forEach","element","calculateProjection","color","selected","defaults","animation","markerData","Array","barDataSoll","histogram","barDataIst","barDataCalc","labels","map","val","datasets","type","barThickness","normalized","order","hoverBackgroundColor","options","responsive","interaction","mode","intersect","events","onClick","onHover","event","bgColor","native","plugins","legend","tooltip","enabled","scales","x","stacked","yAxes","beginAtZero","Bar","onMouseLeave","RangeSlider","arguments","range","update","inputValues","typeNumber","step","isToggleOn","handleClick","e","prevState","stopPropagation","changeSlider","onChangeSlider","Grid","container","item","xs","Slider","rootStyle","onUpdate","onChange","Rail","Handles","handles","Tracks","right","tracks","alignItems","justifyContent","marginRight","TextField","fullWidth","size","margin","inputProps","padding","evt","newState","Tooltip","title","info","Sliders","slidersAr","sliders","refSliders","filterData","filtered","createRef","filterVals","datafilter","componentName","filteredArr","list","idx","reduce","curr","SliderList","slider","SliderPane","sliderReset","console","log","filterImageAr","CustomResultProcessing","SimpleResultProcessing","filter","row","fieldOrLabel","operator","field","tryToGetFieldCategory","toLowerCase","indexOf","Filterbox","exportMetadata","filteredMetadata","obj","filterDataToExportCSV","document","getElementsByClassName","click","parseOK","query2","applyFilter","resetFilter","search","newData","process","query","customRenderCompletionItem","self","pick","fontWeight","fontSize","onParseOk","expressions","onParseError","ReactFilterBox","editorConfig","lineWrapping","ButtonGroup","Button","FilterPane","spacing","allFilter","InfoFields","infos","linkStyle","InfoList","uuid","substring","href","rel","wrap","InfoPane","ViewPane","handleChange","checked","handleChangeGrey","filterGrey","clusters","handleChangeCluster","option","Box","defaultValue","scaleMin","handleChangeScale","scaleMax","handleChangeZoom","MappingsPane","handleSelectAlgorithm","handleSelectDataset","v","selectAlgorithm","selectDataset","algorithm_options","algorithm_choice","dataset_options","selectedDataset","datasetInfo","Export","makePNG","async","canvasToImage","getElementById","_Fragment","marginBottom","CSVLink","filename","Projection","handleResize","camera","aspect","updateProjectionMatrix","renderer","setSize","current_scale","getScaleFromZ","z","d3_x","d3_y","y","resize_transform","d3","translate","scale","view","mount","d3_zoom","transform","updateProjection","ar","filterAr","ranges","ar_sliced","sprite_number","start","sprite_size","end","slice","c","points","scene","geometry","attributes","filteredActive","THREE","needsUpdate","updatePass2Shader","num","material","uniforms","greyTransparency","imageTransparency","updateClusterColors","clusterSelected","numVertices","clusterColors","total","clustersAr_sliced","cluster_unique","l","clusterId","cluster_int","random","cluster","clusterActive","loadTiles","tilesLoaded","init","pointsAr","addPoints","setupCamera","animate","getZFromScale","changeEmbeddings","sprite_side","tile_locations","n","sprite_dir","datasetIMG","src","img","createElement","new_choice","embedding_chunks","mappings","echunk","array","tween","TWEEN","to","easing","Linear","None","zoomScaler","input","clamp","scaleProj","rvFOV","degToRad","fov","tan","camera_z_position","fov_height","zoomHandler","d3_transform","k","set","new_size","point_group","camera_z_start","embeddings_data","vFOV","min_x","_","max_x","ys","min_y","max_y","max_x_from_center","m","max_y_from_center","far","scaleExtent","on","call","initial_scale","initial_transform","loader","textures","t","load","w","flipY","magFilter","vertices","embedding","vert","positionAr","offsetAr","clusterAr","addAttribute","texture_subsize","sprite_image_size","sprite_actual_size","floor","clusterList","clusterTypeSelected","includes","texture","repeat","vertex_shader","fragment_shader","vertexShader","fragmentShader","transparent","point_cloud","userData","sprite_index","add","addBlankHighlightPoints","hover_container","point","frustumCulled","visible","highlightPoint","digit_index","full_index","offsets","copyVector3sArray","offset","removeHighlights","highlight_container","highlights","remove","checkIntersects","mouse_position","previewPane_ctx","mouse_vector","mouseX","mouseY","mouseToThree","raycaster","setFromCamera","params","Points","threshold","intersects","intersectObjects","sorted_intersects","sortIntersectsByDistanceToRay","object","undefined","setHoverIndex","clearRect","fillRect","fillStyle","drawImage","error","handleMouse","domElement","node","clickOnImage","preserveDrawingBuffer","alpha","setClearColor","autoClear","appendChild","requestAnimationFrame","clear","parseInt","greyRenderTypeSelected","componentWillUnmount","removeChild","tileProgress","allTiles","CircularProgress","overflow","Layout","newArr","A","B","currentFilter","currentSearch","refProjection","current","toggleControl","collapsedControl","toggleObject","collapsedObject","ww","wh","previewPane_height","controlPane_height","filterPane_height","setDefaults","algorithm_name","window","addEventListener","setRenderer","addToUrl","p","changeDataset","innerWidth","innerHeight","previewPane_mount","offsetHeight","imageSmoothingEnabled","canvas","ctx","getContext","url_prefix","alt","removeEventListener","url","link_URL","open","err","main_style","background","general_style","lineHeight","displayNumb","maxHeight","controlMenu_mount","ProSidebar","collapsed","Menu","iconShape","MenuItem","FaAngleDoubleLeft","FaAngleDoubleRight","SubMenu","defaultOpen","icon","FaDatabase","grem","font_size","FaSlidersH","FaSearch","FaCloudDownloadAlt","FaRegImage","FaInfo","FaEye","FaQuestion","datasetDir","initPath","Data","dataset_dirs","defaultDataset","scaleEmbeddings","embeddings","queryString","location","urlParams","URLSearchParams","get","loadInit","loadConfig","path","loadSettings","loadBarData","loadMetadata","prepareMappings","ID","name","loadDataset","fetch","file","then","response","json","scaled_embeddings","paramName","navigate","toString","prepareDatasets","directory","choice","newDataset","default","foundInitDataset","floatColorConvertedArr","myColorFunction","rgb","withRouter","useParams","useNavigate","App","BrowserRouter","Routes","Route","exact","WithRouter","Boolean","hostname","match","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8dd16e5f.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass PreviewPane extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      dimensions: {},\r\n      imgURL: null,\r\n      previewImage: false,\r\n      timeoutId: null\r\n    };\r\n    // this.onImgLoad = this.onImgLoad.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.setPreviewPaneCanvas(this.side_canvas);\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.hover_index !== prevProps.hover_index) {\r\n      this.setState({ previewImage: false });\r\n      clearTimeout(this.state.timeoutId);\r\n      const timeoutId = setTimeout(() => {\r\n        this.setState({ previewImage: true });\r\n      }, 100);\r\n      this.setState({ timeoutId });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let {\r\n      previewPane_image_size,\r\n    } = this.props;\r\n    // const {width, height} = this.state.dimensions;\r\n    // var imgWidth = \"auto\";\r\n    // var imgHeight = \"100%\";\r\n    // if (width >= height) {\r\n    //   imgWidth = \"100%\";\r\n    //   imgHeight = \"auto\"\r\n    // };\r\n\r\n    return (\r\n      <div>\r\n      <div style={{position: \"absolute\", width: previewPane_image_size, height: previewPane_image_size, textAlign: \"center\"}}>\r\n        <span style={{display: \"inline-block\", height: \"100%\", verticalAlign: \"middle\"}}/>\r\n\r\n      {this.state.previewImage === true ? this.props.setPreviewImage() : null}\r\n      \r\n      </div>\r\n        <canvas \r\n          ref={side_canvas => {\r\n            this.side_canvas = side_canvas\r\n          }}\r\n          width={previewPane_image_size}\r\n          height={previewPane_image_size}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default React.memo(PreviewPane)\r\n","import React, { Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\n// Based on Material Design spec:\r\n// Styles by https://github.com/RafeSacks\r\n// https://material.io/design/components/sliders.html#spec\r\nconst trackHeight = 2;\r\nconst thumbHeight = 12;\r\n\r\n// *******************************************************\r\n// RAIL COMPONENT\r\n// *******************************************************\r\n\r\nconst muiRailStyle = theme => ({\r\n  rail: {\r\n    backgroundColor: theme.palette.grey[400],\r\n    width: \"100%\",\r\n    height: trackHeight,\r\n    position: \"absolute\",\r\n    pointerEvents: \"none\"\r\n  },\r\n  railHotspot: {\r\n    // backgroundColor: \"green\", // for debugging\r\n    width: \"100%\",\r\n    height: thumbHeight * 2, // Invisible hotspot same size as thumb\r\n    top: thumbHeight * -1,\r\n    position: \"absolute\",\r\n    cursor: \"pointer\"\r\n  }\r\n});\r\n\r\nfunction MuiRailComponent({ classes, getRailProps }) {\r\n  return (\r\n    <Fragment>\r\n      <div className={classes.railHotspot} {...getRailProps()} />\r\n      <div className={classes.rail} />\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nMuiRailComponent.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  getRailProps: PropTypes.func.isRequired\r\n};\r\n\r\nexport const MuiRail = withStyles(muiRailStyle)(MuiRailComponent);\r\n\r\n// *******************************************************\r\n// HANDLE COMPONENT\r\n// *******************************************************\r\n\r\nconst muiHandleStyle = theme => ({\r\n  root: {\r\n    backgroundColor: theme.palette.secondary.main,\r\n    marginLeft: thumbHeight * -0.5,\r\n    marginTop: thumbHeight * -0.5,\r\n    width: thumbHeight,\r\n    height: thumbHeight,\r\n    border: 0,\r\n    borderRadius: \"50%\", // circle\r\n    // boxShadow: \"1px 1px 1px 1px rgba(0, 0, 0, 0.2)\",\r\n    whiteSpace: \"nowrap\", // for child display inline-block to work\r\n    position: \"absolute\",\r\n    zIndex: 2,\r\n    cursor: \"pointer\"\r\n  }\r\n});\r\n\r\nfunction MuiHandleComponent({\r\n  domain: [min, max],\r\n  handle: { id, value, percent },\r\n  classes,\r\n  getHandleProps\r\n}) {\r\n  return (\r\n    <div\r\n      role=\"slider\"\r\n      aria-valuemin={min}\r\n      aria-valuemax={max}\r\n      aria-valuenow={value}\r\n      className={classes.root}\r\n      style={{ left: `${percent}%` }}\r\n      {...getHandleProps(id)}\r\n    />\r\n  );\r\n}\r\n\r\nMuiHandleComponent.propTypes = {\r\n  domain: PropTypes.array.isRequired,\r\n  handle: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    value: PropTypes.number.isRequired,\r\n    percent: PropTypes.number.isRequired\r\n  }).isRequired,\r\n  classes: PropTypes.object.isRequired,\r\n  getHandleProps: PropTypes.func.isRequired\r\n};\r\n\r\nexport const MuiHandle = withStyles(muiHandleStyle)(MuiHandleComponent);\r\n\r\n// *******************************************************\r\n// TRACK COMPONENT\r\n// *******************************************************\r\n\r\nconst muiTrackStyle = theme => ({\r\n  track: {\r\n    backgroundColor: theme.palette.secondary.main,\r\n    height: trackHeight,\r\n    position: \"absolute\",\r\n    zIndex: 1,\r\n    pointerEvents: \"none\"\r\n  },\r\n  trackHotspot: {\r\n    // backgroundColor: \"grey\", // for debugging\r\n    height: thumbHeight, // Invisible hotspot same size as thumb\r\n    top: thumbHeight * -0.5,\r\n    position: \"absolute\",\r\n    cursor: \"pointer\"\r\n  }\r\n});\r\n\r\nfunction MuiTrackComponent({ classes, source, target, getTrackProps }) {\r\n  const left = `${source.percent}%`;\r\n  const width = `${target.percent - source.percent}%`;\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className={classes.track} style={{ left, width }} />\r\n      <div\r\n        className={classes.trackHotspot}\r\n        style={{ left, width }}\r\n        {...getTrackProps()}\r\n      />\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nMuiTrackComponent.propTypes = {\r\n  source: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    value: PropTypes.number.isRequired,\r\n    percent: PropTypes.number.isRequired\r\n  }).isRequired,\r\n  target: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    value: PropTypes.number.isRequired,\r\n    percent: PropTypes.number.isRequired\r\n  }).isRequired,\r\n  classes: PropTypes.object.isRequired,\r\n  getTrackProps: PropTypes.func.isRequired\r\n};\r\n\r\nexport const MuiTrack = withStyles(muiTrackStyle)(MuiTrackComponent);\r\n\r\n// *******************************************************\r\n// TICK COMPONENT\r\n// *******************************************************\r\n\r\nconst muiTickStyle = theme => ({\r\n  tick: {\r\n    position: \"absolute\",\r\n    marginTop: 14,\r\n    width: 1,\r\n    height: 5,\r\n    backgroundColor: theme.palette.grey[400]\r\n  },\r\n  label: {\r\n    position: \"absolute\",\r\n    marginTop: 22,\r\n    textAlign: \"center\"\r\n  }\r\n});\r\n\r\nexport function MuiTickComponent({ classes, tick, count, format }) {\r\n  return (\r\n    <div>\r\n      <div className={classes.tick} style={{ left: `${tick.percent}%` }} />\r\n      <Typography\r\n        className={classes.label}\r\n        variant=\"caption\"\r\n        style={{\r\n          marginLeft: `${-(100 / count) / 2}%`,\r\n          width: `${100 / count}%`,\r\n          left: `${tick.percent}%`\r\n        }}\r\n      >\r\n        {format(tick.value)}\r\n      </Typography>\r\n    </div>\r\n  );\r\n}\r\n\r\nMuiTickComponent.propTypes = {\r\n  tick: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    value: PropTypes.number.isRequired,\r\n    percent: PropTypes.number.isRequired\r\n  }).isRequired,\r\n  classes: PropTypes.object.isRequired,\r\n  count: PropTypes.number.isRequired,\r\n  format: PropTypes.func.isRequired\r\n};\r\n\r\nMuiTickComponent.defaultProps = {\r\n  format: d => d\r\n};\r\n\r\nexport const MuiTick = withStyles(muiTickStyle)(MuiTickComponent);\r\n","import React from \"react\";\r\nimport { Bar, defaults } from \"react-chartjs-2\";\r\n\r\nclass BarChart extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      // bgColor: this.props.color,\r\n      isHovering: false,\r\n      barSelected: null,\r\n    }\r\n    this.onLeave = this.onLeave.bind(this)\r\n    // this.showHideUpdate = this.showHideUpdate.bind(this);\r\n  }\r\n  \r\n\r\n  calculateHistogram(domain,normalize){\r\n    // Calculate frequency of data (adapted for float numbers)\r\n    let data = []\r\n    for(let i=0;i<this.props.settings[\"total\"];i++){\r\n      if(this.props.currentProjection[i]===0){\r\n        data.push(this.props.metadata[i][this.props.sliderID])\r\n      }\r\n    }\r\n    var buckets = {};\r\n    this.bucketsFinder = {};\r\n    const bucketCount = 50;\r\n    var stepSize;\r\n    if(domain[0] < 0){stepSize = (Math.abs(domain[0]) + Math.abs(domain[1])) / bucketCount}\r\n    else{stepSize = Math.abs((Math.abs(domain[0]) - Math.abs(domain[1])) / bucketCount)}\r\n    // Console.log(\"stepSize\", stepSize);\r\n    for (let i = 0; i < bucketCount; i++) {\r\n      buckets[i] = 0;\r\n    }\r\n    var targetBucket;\r\n      for (var i = 0; i < data.length; i++) {\r\n        if (data[i] === domain[1]){targetBucket = bucketCount-1}\r\n        else {\r\n          // console.log(data[i])\r\n          targetBucket = ((data[i] - domain[0]) / stepSize) | 0\r\n        }\r\n        buckets[targetBucket] +=1;\r\n        // if (typeNumber === \"int\")\r\n        // this.bucketsFinder[parseInt(data[i])] = targetBucket;\r\n        // else\r\n        this.bucketsFinder[parseFloat(data[i]).toFixed(1)] = targetBucket;\r\n      }\r\n    var bucketList = Object.values(buckets)\r\n    if (normalize === true){\r\n      // Normalize data\r\n      var ratio = Math.max.apply(Math, bucketList) / 50;\r\n        for (i = 0; i < bucketList.length; i++) {\r\n          bucketList[i] = Math.round(bucketList[i] / ratio);\r\n        }\r\n      }\r\n    const barDataValues = [];\r\n    for (let i = 0; i < bucketList.length; i++) {\r\n      barDataValues.push(bucketList[i] || 0);\r\n    }\r\n    // console.log(barDataValues)\r\n    return barDataValues;\r\n  }\r\n\r\n\r\n  hoverEffect(chartElement) {\r\n    this.setState({isHovering: true});\r\n    if (chartElement[0]) {\r\n      var barID = chartElement[0].index;\r\n      var arr = new Float32Array( this.props.settings[\"total\"] ).fill(1);\r\n      // var arr = !this.props.filterImageAr;\r\n      var prevArr = this.props.currentProjection;\r\n      // console.log(this.props.barData[\"selections\"][barID]);?\r\n      this.props.barData[\"selections\"][barID].forEach(element => {\r\n        // if (prevArr[element] === 1) {\r\n          arr[element] = prevArr[element]\r\n        // }\r\n        // console.log(this.props.barData[\"selections\"][barID])\r\n      });\r\n      this.props.calculateProjection(arr, null, false);\r\n      this.setState({barSelected: barID});\r\n    }\r\n  }\r\n\r\n  onLeave() { \r\n    // this.setState(() => ({isHovering: false}), () => console.log(this.state));\r\n    this.setState({isHovering: false});\r\n    this.props.calculateProjection(this.props.currentProjection, null, false)\r\n  }\r\n\r\n  // componentDidUpdate(prevProps) {\r\n  //   if (this.props.currentProjection !== prevProps.currentProjection) {\r\n  //     this.barDataIst = this.calculateFrequencyOfData(this.props.domain,this.props.datafilter,false);\r\n  //   }\r\n  // }\r\n\r\n\r\n  render() {\r\n    const { barData, domain, color, selected } = this.props;\r\n    defaults.animation = false;\r\n    var markerData = Array(50).fill(0);\r\n    this.barDataSoll = barData.histogram;\r\n    this.barDataIst = this.calculateHistogram(domain,false);\r\n    const barDataCalc = {\r\n      labels: this.barDataSoll.map((val, i) => i),\r\n      datasets: [\r\n        {\r\n          label: \"barDataIst\",\r\n          type: 'bar',\r\n          barThickness: 5,\r\n          normalized: true,\r\n          order: 2,\r\n          backgroundColor: this.state.isHovering ? \"rgb(64, 64, 64)\" : markerData.map((val, i) =>\r\n            i === this.bucketsFinder[parseFloat(selected).toFixed(1)]\r\n              ? \"#f50057\"\r\n              : color\r\n            ),\r\n          hoverBackgroundColor: color,\r\n          // backgroundColor: this.state.bgColor,\r\n\r\n          // backgroundColor: this.barDataIst.map((val, i) =>\r\n          // i === this.bucketsFinder[parseFloat(selected).toFixed(1)]\r\n          //   ? \"rgb(245, 0, 87)\"\r\n          //   : this.state.isHovering ? \"rgb(64, 64, 64)\" : color\r\n          // ),\r\n          data: this.barDataIst\r\n          },\r\n\r\n          {\r\n            label: \"barDataSoll\",\r\n            type: 'bar',\r\n            barThickness: 5,\r\n            normalized: true,\r\n            order: 3,\r\n            backgroundColor: markerData.map((val, i) =>\r\n            i === this.bucketsFinder[parseFloat(selected).toFixed(1)]\r\n              ? \"#542032\"\r\n              : \"rgb(64, 64, 64)\"\r\n            ),\r\n            hoverBackgroundColor: \"rgb(64, 64, 64)\",\r\n\r\n          //   backgroundColor: this.barDataIst.map((val, i) =>\r\n          //   i === this.bucketsFinder[parseFloat(selected).toFixed(1)]\r\n          //     ? \"rgb(255, 153, 189)\"\r\n          //     : \"rgb(64, 64, 64)\"\r\n          // ),\r\n            // hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\r\n            data: this.barDataSoll\r\n          }\r\n      ]\r\n    };\r\n\r\n    // console.log(\"selected\",this.bucketsFinder[parseFloat(selected).toFixed(1)] );\r\n    const options = {\r\n      responsive: true,\r\n      // pointStyle: 'triangle',\r\n      interaction: {\r\n        mode: 'index',\r\n        intersect: false\r\n        },\r\n      events: ['mouseleave', \"mousemove\", \"mouseout\", \"click\"], //, 'touchstart', 'touchmove'],\r\n      hoverBackgroundColor: color,\r\n      onClick: () => {\r\n            this.setState({isHovering: !this.state.isHovering});\r\n            this.props.calculateProjection(this.props.currentProjection, null, false)\r\n      },\r\n      onHover: (event, chartElement) => {\r\n        if (event.type === \"mousemove\" && this.state.isHovering && this.state.barSelected !== chartElement[0].index) {\r\n          this.setState({bgColor: \"rgb(64, 64, 64)\"});\r\n          this.hoverEffect(chartElement)\r\n          if (event.native.target.style.cursor !== 'ew-resize') {\r\n            event.native.target.style.cursor = 'ew-resize';\r\n          }\r\n        } else if (!this.state.isHovering && event.native.target.style.cursor !== 'pointer') {\r\n            event.native.target.style.cursor = 'pointer';\r\n          }\r\n      // if (this.state.isHovering){\r\n      //   ReactTooltip.hide(this.fooRef)\r\n      // }\r\n      },\r\n      plugins: {\r\n        legend: {\r\n          display: false\r\n        },\r\n        tooltip: {\r\n          enabled: false\r\n        }\r\n      },\r\n      scales: {\r\n        x: {\r\n          display: false,\r\n          stacked: true,\r\n          // position: 'bottom'\r\n        },\r\n        yAxes: {\r\n          beginAtZero: true,\r\n          display: false,\r\n          // stacked: true,\r\n          // ticks: {\r\n          //   min: 100\r\n          // }\r\n        }\r\n      }\r\n    };\r\n\r\n\r\n    return (\r\n      <Bar data={barDataCalc} height={62} options={options} onMouseLeave={this.onLeave} />\r\n      );\r\n  }\r\n}\r\n\r\nexport default React.memo(BarChart);\r\n","import React from \"react\";\r\nimport { Grid, TextField, Tooltip } from \"@material-ui/core\";\r\nimport { Slider, Rail, Handles, Tracks } from \"react-compound-slider\";\r\nimport { MuiRail, MuiHandle, MuiTrack } from \"./components\";\r\nimport BarChart from \"./BarChart\";\r\n\r\nclass RangeSlider extends React.Component {\r\n  state = {\r\n    domain: this.props.range,\r\n    update: this.props.range,\r\n    values: this.props.range,\r\n    inputValues: this.props.range,\r\n    typeNumber: this.props.typeNumber,\r\n    step: this.props.step,\r\n    color: this.props.color,\r\n    hover_index: this.props.hover_index,\r\n    isToggleOn: false,\r\n  };\r\n\r\n  handleClick = (e) => {\r\n    this.setState((prevState) => ({ isToggleOn: !prevState.isToggleOn }));\r\n    e.stopPropagation();\r\n  };\r\n\r\n  changeSlider = (values) => {\r\n    this.props.onChangeSlider(this.props.id, values);\r\n  };\r\n\r\n  render() {\r\n    const { domain, values, update, inputValues, color, typeNumber } = this.state;\r\n\r\n    return (\r\n      <Grid container>\r\n        <Grid item xs={12}>\r\n          <div style={{ height: \"90px\", width: \"270px\", marginTop: \"22px\" }}>\r\n            <BarChart\r\n              update={update}\r\n              domain={domain}\r\n              color={color}\r\n              barData={this.props.barData}\r\n              calculateProjection={this.props.calculateProjection}\r\n              settings={this.props.settings}\r\n              currentProjection={this.props.currentProjection}\r\n              sliderID={this.props.sliderID}\r\n              metadata={this.props.metadata}\r\n              selected={this.props.metadata[this.props.hover_index][this.props.sliderID]}\r\n            />\r\n\r\n            <Slider\r\n              mode={3}\r\n              step={typeNumber === \"int\" ? 1 : 0.01}\r\n              domain={domain}\r\n              color={color}\r\n              rootStyle={{\r\n                position: \"relative\",\r\n                width: \"100%\",\r\n              }}\r\n              onUpdate={(update) => {\r\n                this.setState({ update, inputValues: update });\r\n              }}\r\n              onChange={(values) => {\r\n                this.setState({ values });\r\n                this.changeSlider(update);\r\n              }}\r\n              values={values}\r\n            >\r\n              <Rail>\r\n                {({ getRailProps }) => <MuiRail getRailProps={getRailProps} />}\r\n              </Rail>\r\n              <Handles>\r\n                {({ handles, getHandleProps }) => (\r\n                  <div className=\"slider-handles\">\r\n                    {handles.map((handle) => (\r\n                      <MuiHandle\r\n                        key={handle.id}\r\n                        handle={handle}\r\n                        domain={domain}\r\n                        getHandleProps={getHandleProps}\r\n                      />\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </Handles>\r\n              <Tracks left={false} right={false}>\r\n                {({ tracks, getTrackProps }) => (\r\n                  <div className=\"slider-tracks\">\r\n                    {tracks.map(({ id, source, target }) => (\r\n                      <MuiTrack\r\n                        key={id}\r\n                        source={source}\r\n                        target={target}\r\n                        getTrackProps={getTrackProps}\r\n                      />\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </Tracks>\r\n            </Slider>\r\n            <Grid\r\n              container\r\n              alignItems=\"center\"\r\n              justifyContent=\"space-around\"\r\n              // style={{ marginTop: \"15px\" }}\r\n            >\r\n              <Grid\r\n                item\r\n                xs={3}\r\n                style={{\r\n                textAlign: \"right\",\r\n                border: \"solid 1px white\",\r\n                height:\"20px\",\r\n                marginLeft: 'auto',\r\n                marginRight: 'auto',\r\n                // marginTop: '-12px',\r\n                }}\r\n              >\r\n                <TextField\r\n                  fullWidth\r\n                  variant=\"outlined\"\r\n                  label=\"\"\r\n                  size=\"small\"\r\n                  width=\"8px\"\r\n                  value={inputValues[0]}\r\n                  margin=\"none\"\r\n                  inputProps={{\r\n                    style: {\r\n                      color:\"white\",\r\n                      padding: 0,\r\n                      marginLeft: 2\r\n                    }\r\n                  }}\r\n                  onChange={(evt) => {\r\n                    const value = evt.target.value;\r\n                    const newState = [value, inputValues[1]];\r\n                    this.setState({ inputValues: newState });\r\n                    if (value && value >= domain[0]) {\r\n                      this.setState({ values: newState });\r\n                    }\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={4} style={{ textAlign: \"center\",  marginTop: '-6px',}}>\r\n\r\n              <Tooltip title={<h3>{this.props.info}</h3>}>\r\n              <h3 style={{cursor: \"help\"}}>{this.props.title}</h3>\r\n              </Tooltip>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                xs={3}\r\n                style={{\r\n                textAlign: \"right\",\r\n                border: \"solid 1px white\",\r\n                height:\"20px\",\r\n                marginLeft: 'auto',\r\n                marginRight: 'auto',\r\n                // marginTop: '-12px',\r\n                }}\r\n              >\r\n                <TextField\r\n                  fullWidth\r\n                  variant=\"outlined\"\r\n                  label=\"\"\r\n                  size=\"small\"\r\n                  value={inputValues[1]}\r\n                  margin=\"none\"\r\n                  inputProps={{\r\n                    style: {\r\n                      color:\"white\",\r\n                      padding: 0,\r\n                      marginLeft: 2\r\n                    }\r\n                  }}\r\n                  // style={{ paddingTop: \"2px\", paddingBottom: \"8px\",color: \"white\" }}\r\n                  onChange={(evt) => {\r\n                    const value = evt.target.value;\r\n                    const newState = [inputValues[0], value];\r\n                    this.setState({ inputValues: newState });\r\n                    if (value && value <= domain[1] && value >= values[0]) {\r\n                      this.setState({ values: newState });\r\n                    }\r\n                  }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </div>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default React.memo(RangeSlider);\r\n","import React, { Component } from 'react';\r\nimport { Grid } from \"@material-ui/core\";\r\nimport RangeSlider from \"./RangeSlider\";\r\n//import uuid from 'react-uuid';\r\n\r\nclass Sliders extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.changeSlider = this.changeSlider.bind(this);\r\n    // create references for each slider\r\n    this.slidersAr = []\r\n    for (let element in this.props.settings.sliders) {\r\n      this.slidersAr.push( this.props.settings.sliders[element].id );\r\n    }\r\n    this.refSliders = {}\r\n    this.filterData = {}\r\n    this.filtered = {}\r\n\r\n    for(let i=0;i<this.slidersAr.length;i+=1){\r\n      this.refSliders[this.slidersAr[i]] = React.createRef();\r\n      // Initial values non filter\r\n      let filterVals = []\r\n      for (let element in this.props.metadata) {\r\n        filterVals.push( this.props.metadata[element][this.slidersAr[i]] );\r\n      }\r\n      this.filterData[this.slidersAr[i]] = filterVals\r\n    }\r\n    this.state = {\r\n      datafilter: this.filterData\r\n    }\r\n\r\n  }\r\n\r\n  changeSlider(componentName, values) {\r\n    // console.log(componentName, values);\r\n    let {\r\n      metadata,\r\n    } = this.props\r\n    this.filtered[componentName] = new Float32Array( this.props.settings[\"total\"]).fill(0)\r\n    let filteredArr = new Float32Array( this.props.settings[\"total\"])\r\n\r\n    for(let element in metadata){\r\n      if(values[0] > metadata[element][componentName] ||\r\n          values[1] < metadata[element][componentName]\r\n          ){\r\n            this.filtered[componentName][element] = 1\r\n      }\r\n    }\r\n    let list = Object.values(this.filtered)\r\n    let arr = filteredArr.map((x, idx) => list.reduce((max, curr) => max + curr[idx], 0));\r\n    this.props.calculateProjection(arr, \"filter\", true)\r\n  }\r\n\r\n\r\n  render() {\r\n    let {\r\n      hover_index,\r\n      settings,\r\n      barData,\r\n    } = this.props;\r\n\r\n    const slidersSettings = settings['sliders'];\r\n    const SliderList = slidersSettings.map((slider) =>\r\n    <Grid item>\r\n      <RangeSlider\r\n        ref={this.refSliders[slider['id']]}\r\n        datafilter={this.state.datafilter[slider['id']]}\r\n        title={slider['title']}\r\n        id={slider['id']}\r\n        info={slider['info']}\r\n        typeNumber={slider['typeNumber']}\r\n        color={slider['color']}\r\n        onChangeSlider={this.changeSlider}\r\n        hover_index={hover_index}\r\n        barData={barData[slider['id']]}\r\n        calculateProjection={this.props.calculateProjection}\r\n        currentProjection={this.props.currentProjection}\r\n        settings={settings}\r\n        sliderID={slider['id']}\r\n        metadata={this.props.metadata}\r\n        range={[slider['min'],slider['max']]}\r\n        />\r\n      </Grid>\r\n    )\r\n\r\n    return (\r\n      <Grid container style={{ marginLeft: \"6px\"}}>\r\n        <Grid item >\r\n        {SliderList}\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Sliders\r\n","import React, { Component } from 'react'\r\nimport Sliders from \"./Sliders/Sliders\";\r\n\r\nclass SliderPane extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.sliderReset = this.sliderReset.bind(this);\r\n  }\r\n\r\n  sliderReset() {\r\n    console.log(\"reset range sliders\");\r\n  }\r\n\r\n  render() {\r\n    let {\r\n      metadata,\r\n      hover_index,\r\n    } = this.props;\r\n\r\n    return (\r\n      <Sliders\r\n        metadata={metadata}\r\n        settings={this.props.settings}\r\n        hover_index={hover_index}\r\n        barData={this.props.barData}\r\n        filterImageAr={this.props.filterImageAr}\r\n        calculateProjection={this.props.calculateProjection}\r\n        currentProjection={this.props.currentProjection}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nexport default React.memo(SliderPane)","import React, { Component } from 'react'\r\nimport  _ from \"lodash\";\r\nimport { Button, ButtonGroup } from \"@material-ui/core\";\r\nimport ReactFilterBox, {SimpleResultProcessing, GridDataAutoCompleteHandler} from \"react-filter-box\";\r\nimport \"./filter-box.css\";\r\n\r\n//Extend this class to add your custom operator\r\n// class CustomAutoComplete extends GridDataAutoCompleteHandler {\r\n//     // Override this method to add new your operator\r\n//     needOperators(parsedCategory) {\r\n//         var result = super.needOperators(parsedCategory);\r\n//         return result.concat([\"startsWith\"]);\r\n//     }\r\n// }\r\n\r\nclass CustomResultProcessing extends SimpleResultProcessing {\r\n    // Override this method to add your handler for startsWith operator\r\n    filter(row, fieldOrLabel, operator, value){\r\n        var field = this.tryToGetFieldCategory(fieldOrLabel);\r\n        switch(operator){\r\n            case \"==\": return row[field] === value;\r\n            case \"!=\": return row[field] !== value;\r\n            case \"contains\": return row[field] && row[field].toLowerCase().indexOf(value.toLowerCase()) >=0;\r\n            case \"!contains\": return row[field] && row[field].toLowerCase().indexOf(value.toLowerCase()) <0;\r\n            default: return false;\r\n        }\r\n    }\r\n    }\r\n\r\nclass Filterbox extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            parseOK: true,\r\n            query2: {}\r\n        };\r\n        this.applyFilter = this.applyFilter.bind(this);\r\n        this.resetFilter = this.resetFilter.bind(this);\r\n        this.options = this.props.settings.search;\r\n        // this.customAutoComplete = new CustomAutoComplete(this.props.metadata,this.options);\r\n        // this.editorConfig = {\r\n        //     direction: \"rtl\"\r\n        // };\r\n    }\r\n\r\n    applyFilter() {\r\n        var newData = new CustomResultProcessing(this.options).process(this.props.metadata, this.state.query2);\r\n        var arr = new Float32Array(this.props.settings[\"total\"]).fill(1);\r\n        newData.forEach(element => {\r\n            arr[element[\"index\"]] = 0;\r\n        });     \r\n        this.props.calculateProjection(arr, \"search\", true);\r\n    }\r\n\r\n    resetFilter() {\r\n        this.setState({ query: null, query2: '' });\r\n        var arr = new Float32Array(this.props.settings[\"total\"]).fill(0);\r\n        this.props.calculateProjection(arr, \"search\", true);\r\n    }\r\n\r\n    //customer your rendering item in auto complete\r\n    customRenderCompletionItem(self, data, pick) {\r\n        var className = `hint-value cm-${data.type}`\r\n        return <div className={className} >\r\n                    <span style={{ fontWeight: \"bold\" }}>{data.value}</span>\r\n                    <span style={{color:\"gray\", fontSize:10}}> [{data.type}] </span>\r\n                </div>\r\n    }\r\n\r\n    onParseOk(expressions) {\r\n        this.setState({ parseOK: false });\r\n        this.setState({ query2: expressions });\r\n        // this.applyFilter(expressions);\r\n    }\r\n\r\n    onParseError(expressions) {\r\n        this.setState({ parseOK: true });\r\n    }\r\n    \r\n    exportMetadata = () => {\r\n        var filteredMetadata = [];\r\n        for (let i = 0; i < this.props.metadata.length; i++) {\r\n          if (this.props.currentProjection[i] === 0) {\r\n            var obj = this.props.metadata[i];\r\n            filteredMetadata.push(obj);\r\n          }\r\n        }\r\n        this.setState(\r\n          { filterDataToExportCSV: filteredMetadata },\r\n          () => {\r\n            document.getElementsByClassName('hidden')[0].click();\r\n          }\r\n        );\r\n      };\r\n      \r\n\r\n    render() {\r\n        return (\r\n        <div className=\"main-container\">\r\n            <ReactFilterBox\r\n                // autoCompleteHandler = {this.customAutoComplete}\r\n                customRenderCompletionItem = {this.customRenderCompletionItem.bind(this) }\r\n                query={this.state.query}\r\n                data={this.props.metadata}\r\n                options={this.options}\r\n                onParseOk={this.onParseOk.bind(this) }\r\n                onParseError={this.onParseError.bind(this) }\r\n                editorConfig={{ lineWrapping: true }}\r\n            />\r\n\r\n            <ButtonGroup variant=\"contained\">\r\n            <Button onClick={this.applyFilter}>apply</Button>\r\n            <Button onClick={this.resetFilter}>reset</Button>\r\n            </ButtonGroup>\r\n\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Filterbox","import React, { Component } from 'react'\r\nimport { Grid } from \"@material-ui/core\";\r\n//import _ from \"lodash\";\r\nimport Filterbox from \"./QueryFilter\";\r\n\r\nclass FilterPane extends Component {\r\n\r\n  render() {\r\n    let {\r\n      metadata,\r\n      settings,\r\n    } = this.props\r\n\r\n    return (\r\n      <Grid container spacing={2}>\r\n        <Filterbox \r\n          calculateProjection={this.props.calculateProjection}\r\n          settings={settings}\r\n          metadata={metadata}\r\n          currentProjection={this.props.currentProjection}\r\n          allFilter={this.props.allFilter}\r\n        />\r\n      </Grid>\r\n    )\r\n  }\r\n}\r\n\r\nexport default React.memo(FilterPane)","import React, { Component, Fragment } from 'react'\r\nimport { Grid } from \"@material-ui/core\";\r\nimport uuid from 'react-uuid';\r\n\r\nclass InfoFields extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        let {\r\n            metadata,\r\n            hover_index,\r\n            infos,\r\n        } = this.props;\r\n\r\n        const linkStyle = {\r\n            color: 'CornflowerBlue'\r\n        };\r\n        \r\n\r\n        const InfoList = infos.map((info) => \r\n            <Fragment>\r\n                <Grid key={uuid()} item xs={4}>\r\n                    {info}:\r\n                </Grid>\r\n                <Grid key={uuid()} item xs={8}>   \r\n                    {( typeof  metadata[hover_index][info] === 'string' && metadata[hover_index][info].length>4 && metadata[hover_index][info].substring(0, 4)==='http')  ? <a href={metadata[hover_index][info]} target=\"_blank\" rel=\"noreferrer\" style={linkStyle}>{metadata[hover_index][info].substring(8,30)}...</a>: metadata[hover_index][info]}\r\n                </Grid>\r\n            </Fragment>\r\n        )\r\n\r\n        return (\r\n            <Grid key={uuid()} container justifyContent=\"space-between\" spacing={1} wrap=\"wrap\">    \r\n                {/* <Grid key={uuid()} item xs={12}>   \r\n                    <b>{metadata[hover_index].Title}</b>\r\n                </Grid> */}\r\n                {InfoList}\r\n\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default InfoFields","import React, { Component } from 'react'\r\nimport InfoFields from \"./InfoFields\";\r\n\r\nclass InfoPane extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      dimensions: {},\r\n    };\r\n  }\r\n\r\n  render() {\r\n    let {\r\n      hover_index,\r\n      infos,\r\n      metadata,\r\n    } = this.props;\r\n\r\n    return (\r\n      <InfoFields\r\n      metadata={metadata}\r\n      hover_index={hover_index}\r\n      infos={infos}\r\n      />\r\n    )\r\n\r\n  }\r\n}\r\n\r\nexport default React.memo(InfoPane)\r\n","import React, { Component } from 'react'\r\nimport { Grid, Slider, Box } from \"@material-ui/core\";\r\n\r\nclass ViewPane extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      dimensions: {},\r\n      checked: this.props.filterGrey\r\n    }\r\n  }\r\n\r\n  handleChange = () => {\r\n    this.setState(prevState => ({\r\n      checked: !prevState.checked\r\n    }));\r\n    this.props.handleChangeGrey(this.state.checked ? 1 : 0);\r\n  }\r\n\r\n  render() {\r\n    let {\r\n      clusters\r\n    } = this.props\r\n\r\n    return (\r\n      <Grid container spacing={1}>\r\n        \r\n          \r\n          <Grid item xs={4}>\r\n            clusters:\r\n          </Grid>\r\n          <Grid item xs={8}>\r\n            <select onChange={this.props.handleChangeCluster}>\r\n              <option key=\"0\" value=\"disabled\">-</option>\r\n              {clusters['clusterList'].map((option, index) => (\r\n              <option key={option} value={option}>\r\n                  {option.toLowerCase()}\r\n              </option>\r\n              ))}\r\n            </select> \r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            size (out):\r\n          </Grid>\r\n          <Grid item xs={8}>\r\n          <Box height={10}>\r\n          <Slider\r\n            size=\"small\"\r\n            defaultValue={this.props.scaleMin}\r\n            min={3}\r\n            max={60}\r\n            onChange={this.props.handleChangeScale}\r\n          />\r\n          </Box>\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n          size (in):\r\n          </Grid>\r\n          <Grid item xs={8}>\r\n          <Box height={10}>\r\n          <Slider\r\n            size=\"small\"\r\n            defaultValue={this.props.scaleMax}\r\n            min={3}\r\n            max={120}\r\n            onChange={this.props.handleChangeZoom}\r\n          />\r\n          </Box>\r\n          </Grid>\r\n\r\n          <Grid item xs={11}>\r\n          show filtered-out items (slower):\r\n          </Grid>\r\n          <Grid item xs={1}>\r\n            <input type=\"checkbox\" \r\n            checked={this.state.checked} \r\n            onChange={this.handleChange}\r\n            />\r\n          </Grid>\r\n\r\n      </Grid>\r\n    )\r\n  }\r\n}\r\n\r\nexport default React.memo(ViewPane)\r\n","import React, { Component } from 'react'\r\nimport { Grid } from \"@material-ui/core\";\r\n\r\nclass MappingsPane extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.handleSelectAlgorithm = this.handleSelectAlgorithm.bind(this);\r\n    this.handleSelectDataset = this.handleSelectDataset.bind(this);\r\n  }\r\n\r\n  handleSelectAlgorithm(e) {\r\n    let v = e.target.value;\r\n    this.props.selectAlgorithm(v);\r\n  }\r\n\r\n  handleSelectDataset(e) {\r\n    let v = e.target.value;\r\n    this.props.selectDataset(v);\r\n  }\r\n\r\n  render() {\r\n    let {\r\n      algorithm_options,\r\n      algorithm_choice,\r\n      dataset_options,\r\n      selectedDataset,\r\n      datasetInfo\r\n    } = this.props;\r\n\r\n    return (\r\n      \r\n      <Grid container spacing={1}>\r\n          <Grid item xs={4}>\r\n            Dataset:\r\n          </Grid>\r\n          <Grid item xs={8}>\r\n            <select className=\"full-width\"\r\n              onChange={this.handleSelectDataset}\r\n              value={selectedDataset}\r\n            >\r\n              {dataset_options.map((option, index) => (\r\n              <option key={option} value={option}>\r\n                  {option}\r\n              </option>\r\n              ))}\r\n            </select>\r\n          </Grid>\r\n\r\n          <Grid item xs={4}>\r\n            Projection:\r\n          </Grid>\r\n          <Grid item xs={8}>\r\n            <select className=\"full-width\"\r\n              onChange={this.handleSelectAlgorithm}\r\n              value={algorithm_options[algorithm_choice]}\r\n            >\r\n              {algorithm_options.map((option, index) => (\r\n              <option key={option} value={option}>\r\n                  {option}\r\n              </option>\r\n              ))}\r\n            </select>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n          <p className=\"info\">{datasetInfo}</p>\r\n          </Grid>\r\n      </Grid>\r\n    )\r\n  }\r\n}\r\n\r\nexport default React.memo(MappingsPane)","\r\nimport React, { Component } from 'react'\r\nimport { Button } from \"@material-ui/core\";\r\nimport { CSVLink } from \"react-csv\";\r\nimport canvasToImage from 'canvas-to-image';\r\n\r\n\r\nclass Export extends Component {\r\n    constructor(props) {\r\n      super(props)\r\n      this.state = {\r\n        filterDataToExportCSV:[],\r\n    }\r\n    }\r\n\r\n    makePNG = async () => {\r\n        console.log('download projection area as png')\r\n        canvasToImage(document.getElementById(\"threeCanvas\"));\r\n      }\r\n\r\n  \r\n\r\nrender() {\r\n    let {\r\n        metadata,\r\n        currentProjection\r\n      } = this.props;\r\n\r\n    return (\r\n        <><div style={{ marginBottom: \"12px\" }}>\r\n        <CSVLink \r\n            data={this.state.filterDataToExportCSV} \r\n            filename={\"CSN_filtered_metadata.csv\"} \r\n            target=\"_blank\"\r\n            onClick={() => {\r\n            let filteredMetadata = [];\r\n            for (let i=0;i<metadata.length;i++) {\r\n                if(currentProjection[i]===0){\r\n                var obj = metadata[i];\r\n                filteredMetadata.push(obj)\r\n                }\r\n            }\r\n            this.setState({filterDataToExportCSV: filteredMetadata});\r\n            }}                \r\n            >\r\n            <Button variant=\"contained\" fullWidth >Download metadata CSV</Button>\r\n            </CSVLink>\r\n            </div><div>\r\n                <Button variant=\"contained\" fullWidth onClick={this.makePNG}>Download projection PNG</Button>\r\n            </div></>\r\n\r\n    )\r\n\r\n\r\n}\r\n  \r\n    // // Release memory of export filter metadata\r\n    // if(this.state.filterDataToExportCSV.length>0) this.setState({filterDataToExportCSV: []});\r\n\r\n\r\n}\r\n\r\nexport default React.memo(Export)\r\n\r\n","import React, { Component } from 'react'\r\nimport * as THREE from 'three'\r\nimport * as _ from 'lodash'\r\nimport * as d3 from 'd3'\r\nimport * as TWEEN from '@tweenjs/tween.js'\r\nimport { CircularProgress } from \"@material-ui/core\";\r\n\r\nclass Projection extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.loadTiles()\r\n    this.state = {\r\n      tilesLoaded: 0,\r\n      view: null\r\n    }\r\n    this.init = this.init.bind(this)\r\n    this.pointsAr = []\r\n    this.addPoints = this.addPoints.bind(this)\r\n    this.handleResize = this.handleResize.bind(this)\r\n    this.setupCamera = this.setupCamera.bind(this)\r\n    this.animate = this.animate.bind(this)\r\n    this.getScaleFromZ = this.getScaleFromZ.bind(this)\r\n    this.getZFromScale = this.getZFromScale.bind(this)\r\n    this.changeEmbeddings = this.changeEmbeddings.bind(this)\r\n  }\r\n\r\n  loadTiles(){ \r\n    this.sprite_size = this.props.settings.sprite_side * this.props.settings.sprite_side\r\n    this.tile_locations = [...Array(this.props.settings.sprite_number)].map(\r\n      (n, i) => `${process.env.PUBLIC_URL}/datasets/${this.props.settings.sprite_dir}/tile_${i}.png`\r\n    )  \r\n    this.datasetIMG = this.tile_locations.map(src => {\r\n      let img = document.createElement('img')\r\n      img.src = src\r\n      return img\r\n    })\r\n  }\r\n\r\n  //changeEmbeddings(prev_choice, new_choice) {\r\n  changeEmbeddings(new_choice) {\r\n    let ranges = []\r\n    for (let i = 0; i < this.props.settings.sprite_number; i++) {\r\n      let start = i * this.sprite_size\r\n      let end = (i + 1) * this.sprite_size\r\n      if (i === this.props.settings.sprite_number - 1) end = this.props.settings.sprite_number * this.sprite_size\r\n      ranges.push([start, end])\r\n    }\r\n\r\n    let embedding_chunks = ranges.map(range =>\r\n      this.props.mappings[new_choice].slice(\r\n        range[0],\r\n        range[1]\r\n      )\r\n    )\r\n\r\n    for (let c = 0; c < this.props.settings.sprite_number; c++) {\r\n      let echunk = embedding_chunks[c]\r\n\r\n      let points = this.scene.children[0].children[c]\r\n      let numVertices = echunk.length\r\n\r\n      let position = points.geometry.attributes.position.array\r\n      let target = new Float32Array(numVertices * 3)\r\n      for (let i = 0, index = 0, l = numVertices; i < l; i++, index += 3) {\r\n        let x = echunk[i][0]\r\n        let y = echunk[i][1]\r\n        let z = 0\r\n        target[index] = x\r\n        target[index + 1] = y\r\n        target[index + 2] = z\r\n      }\r\n\r\n      let tween = new TWEEN.Tween(position)\r\n        .to(target, 1000)\r\n        .easing(TWEEN.Easing.Linear.None)\r\n      tween.onUpdate(function() {\r\n        points.geometry.attributes.position = new THREE.BufferAttribute(\r\n          position,\r\n          3\r\n        )\r\n        points.geometry.attributes.position.needsUpdate = true // required after the first render\r\n      })\r\n      tween.start();\r\n    }\r\n  }\r\n\r\n  zoomScaler(input) {\r\n    let scaleProj = d3\r\n    .scaleLinear()\r\n    .domain([20,0])\r\n    .range([this.props.scaleMin, this.props.scaleMax])\r\n    .clamp(true);\r\n    return scaleProj(input);\r\n  }\r\n\r\n  getZFromScale(scale) {\r\n    let rvFOV = THREE.Math.degToRad(this.camera.fov);\r\n    let scale_height = this.props.height / scale;\r\n    let camera_z_position = scale_height / (2 * Math.tan(rvFOV / 2));\r\n    return camera_z_position;\r\n  }\r\n\r\n  getScaleFromZ(camera_z_position) {\r\n    let rvFOV = THREE.Math.degToRad(this.camera.fov);\r\n    let half_fov_height = Math.tan(rvFOV / 2) * camera_z_position;\r\n    let fov_height = half_fov_height * 2;\r\n    let scale = this.props.height / fov_height;\r\n    return scale;\r\n  }\r\n\r\n  handleResize = (width, height) => {\r\n    this.camera.aspect = width / height;\r\n    this.camera.updateProjectionMatrix();\r\n    this.renderer.setSize(width, height);\r\n    let current_scale = this.getScaleFromZ(this.camera.position.z);\r\n    let d3_x = -(this.camera.position.x * current_scale) + this.props.width / 2;\r\n    let d3_y = this.camera.position.y * current_scale + this.props.height / 2;\r\n    var resize_transform = d3.zoomIdentity\r\n      .translate(d3_x, d3_y)\r\n      .scale(current_scale);\r\n    let view = d3.select(this.mount);\r\n    this.d3_zoom.transform(view, resize_transform);\r\n  }\r\n\r\n  zoomHandler() {\r\n    let d3_transform = d3.event.transform;\r\n    let scale = d3_transform.k;\r\n    let x = -(d3_transform.x - this.props.width / 2) / scale;\r\n    let y = (d3_transform.y - this.props.height / 2) / scale;\r\n    let z = this.getZFromScale(scale);\r\n    this.camera.position.set(x, y, z);\r\n    // point size scales at end of zoom\r\n    let new_size = this.zoomScaler(z);\r\n    let point_group = this.scene.children[0].children;\r\n    for (let c = 0; c < point_group.length; c++) {\r\n      point_group[c].material.uniforms.size.value = new_size;\r\n    }\r\n  }\r\n\r\n  setupCamera() {\r\n    let { width, height, embeddings_data } = this.props\r\n\r\n    let vFOV = this.camera.fov\r\n    let rvFOV = THREE.Math.degToRad(vFOV)\r\n\r\n    let xs = embeddings_data.map(e => e[0])\r\n    let min_x = _.min(xs)\r\n    let max_x = _.max(xs)\r\n    let ys = embeddings_data.map(e => e[1])\r\n    let min_y = _.min(ys)\r\n    let max_y = _.max(ys)\r\n\r\n    let max_x_from_center = _.max([min_x, max_x].map(m => Math.abs(m)))\r\n    let max_y_from_center = _.max([min_y, max_y].map(m => Math.abs(m)))\r\n\r\n    let max_center = Math.max(max_x_from_center, max_y_from_center)\r\n\r\n    let camera_z_start\r\n    // if (data_aspect > aspect) {\r\n    //   // console.log(\"width is limiter\");\r\n    //   // camera_z_start = max_x_from_center / Math.tan(rvFOV / 2) / aspect\r\n    // } else {\r\n    //   // console.log(\"height is limiter\");\r\n    //   // camera_z_start = max_y_from_center / Math.tan(rvFOV / 2)\r\n    // }\r\n\r\n    camera_z_start = max_center / Math.tan(rvFOV / 2)\r\n\r\n    let far = camera_z_start * 1.25\r\n    this.camera.far = far\r\n    this.camera.position.z = camera_z_start * 1.1\r\n\r\n    // set up zoom\r\n    this.d3_zoom = d3\r\n      .zoom()\r\n      .scaleExtent([this.getScaleFromZ(far - 1), this.getScaleFromZ(0.1)])\r\n      .on('zoom', this.zoomHandler.bind(this))\r\n\r\n    let view = d3.select(this.mount)\r\n    this.view = view\r\n    view.call(this.d3_zoom)\r\n    let initial_scale = this.getScaleFromZ(this.camera.position.z)\r\n    var initial_transform = d3.zoomIdentity\r\n      .translate(width / 2, height / 2)\r\n      .scale(initial_scale)\r\n    this.d3_zoom.transform(view, initial_transform)\r\n    this.setState({ view: view })\r\n  }\r\n\r\n  addPoints() {\r\n    let { embeddings_data,metadata } = this.props;\r\n\r\n    // split embeddings and labels into chunks to match sprites\r\n    let ranges = [];\r\n    for (let i = 0; i < this.props.settings.sprite_number; i++) {\r\n      let start = i * this.sprite_size;\r\n      let end = (i + 1) * this.sprite_size;\r\n      if (i === this.props.settings.sprite_number - 1) end = this.props.settings.sprite_number * this.sprite_size;\r\n      ranges.push([start, end]);\r\n    }\r\n    let embedding_chunks = ranges.map(range =>\r\n      embeddings_data.slice(range[0], range[1])\r\n    );\r\n\r\n    // load the textures\r\n    let loader = new THREE.TextureLoader();\r\n    this.textures = this.tile_locations.map(l => {\r\n      let t = loader.load(l,\r\n        function ( w ) {\r\n          this.setState({ tilesLoaded: this.state.tilesLoaded+1 });\r\n        }.bind(this)\r\n      )\r\n      t.flipY = false\r\n      t.magFilter = THREE.NearestFilter\r\n      return t\r\n    })  \r\n    let geometry;\r\n    let point_group = new THREE.Group();\r\n    for (let c = 0; c < this.props.settings.sprite_number; c++) {\r\n      let echunk = embedding_chunks[c];\r\n      //let lchunk = label_chunks[c]\r\n\r\n      let vertices = [];\r\n      for (let v = 0; v < echunk.length; v++) {\r\n        let embedding = echunk[v];\r\n        let vert = new THREE.Vector3(embedding[0], embedding[1], 0);\r\n        vertices[v] = vert;\r\n      }\r\n\r\n      geometry = new THREE.BufferGeometry();\r\n\r\n      let numVertices = vertices.length;\r\n      // console.log(\"numVertices -->\",numVertices)\r\n      let positionAr = new Float32Array(numVertices * 3);\r\n      let offsetAr = new Float32Array(numVertices * 2);\r\n      let clusterAr = new Float32Array(numVertices * 3);\r\n      let filterAr = new Float32Array(numVertices );\r\n      //let clustersActive = new Float32Array(numVertices );\r\n      geometry.addAttribute('position', new THREE.BufferAttribute(positionAr, 3));\r\n      geometry.addAttribute('offset', new THREE.BufferAttribute(offsetAr, 2));\r\n      geometry.addAttribute('filter', new THREE.BufferAttribute(filterAr, 1));\r\n      geometry.addAttribute('cluster', new THREE.BufferAttribute(clusterAr, 3));\r\n      //geometry.addAttribute('clusterActive', new THREE.BufferAttribute(clustersActive, 1));\r\n\r\n      for (let i = 0, index = 0, l = numVertices; i < l; i++, index += 3) {\r\n        let x = echunk[i][0];\r\n        let y = echunk[i][1];\r\n        let z = 0;\r\n        positionAr[index] = x;\r\n        positionAr[index + 1] = y;\r\n        positionAr[index + 2] = z;\r\n      }\r\n      // geometry.attributes.position.copyVector3sArray(vertices)\r\n\r\n      let texture_subsize = 1 / this.props.settings.sprite_side;\r\n\r\n      for (let i = 0, index = 0, l = numVertices; i < l; i++, index += 2) {\r\n        let x = ((i % this.props.settings.sprite_side) * this.props.settings.sprite_image_size) / this.props.settings.sprite_actual_size\r\n        let y =\r\n          (Math.floor(i / this.props.settings.sprite_side) * this.props.settings.sprite_image_size) / this.props.settings.sprite_actual_size\r\n        offsetAr[index] = x;\r\n        offsetAr[index + 1] = y;\r\n      }\r\n      if (this.props.settings.clusters.clusterList) {\r\n        // Todo: connect cluster the array\r\n        let clusterSelected = this.props.clusterTypeSelected;\r\n        let clusterColors = this.props.settings.clusters.clusterColors;\r\n        // console.log(\"clusterSelected\",clusterSelected)\r\n        for (let i = 0, index = 0, l = numVertices; i < l; i++, index += 1) {\r\n          // Images disable when are not visible\r\n          filterAr[index] = 0.0;// default value to show all images\r\n\r\n          // Clusters visualization\r\n\r\n          if( clusterSelected !== \"-\" && this.props.settings.clusters.clusterList.includes(clusterSelected) ){ \r\n              let clusterId = metadata[index][clusterSelected];\r\n              if(clusterId >= clusterColors.length){\r\n                clusterAr[index*3] = 1.0;\r\n                clusterAr[index*3 + 1] = 1.0;\r\n                clusterAr[index*3 + 2] = 1.0;\r\n              }else{\r\n                clusterAr[index*3] = clusterColors[clusterId][0];\r\n                clusterAr[index*3 + 1] = clusterColors[clusterId][1];\r\n                clusterAr[index*3 + 2] = clusterColors[clusterId][2];\r\n              }\r\n          }\r\n      }\r\n    }\r\n      // uniforms\r\n      let uniforms = {\r\n        texture: { value: this.textures[c] },\r\n        repeat: { value: new THREE.Vector2(texture_subsize, texture_subsize) },\r\n        size: { value: this.props.settings.sprite_image_size },\r\n        greyTransparency:{ value:0.1},\r\n        imageTransparency:{ value:1.0},\r\n        clusterActive:{ value:0.0}\r\n      };\r\n\r\n      let vertex_shader = `\r\n        attribute vec2 offset;\r\n        varying vec2 vOffset;\r\n        attribute vec3 cluster;\r\n        varying vec3 vCluster;\r\n        attribute float filteredActive;\r\n        varying float vFilteredActive;\r\n        uniform float clusterActive;\r\n        varying float vClusterActive;\r\n        uniform float size;\r\n        uniform float greyTransparency;\r\n        varying float vGreyTransparency;\r\n        uniform float imageTransparency;\r\n        varying float vImageTransparency;\r\n\r\n        void main() {\r\n          vOffset = offset;\r\n          vFilteredActive = filteredActive;\r\n          vCluster = cluster;\r\n          vClusterActive = clusterActive;\r\n          vGreyTransparency = greyTransparency;\r\n          vImageTransparency = imageTransparency;\r\n          gl_PointSize = size;\r\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n        }`;\r\n\r\n      let fragment_shader = `\r\n        uniform sampler2D texture;\r\n        uniform vec2 repeat;\r\n        varying vec2 vOffset;\r\n        varying vec3 vCluster;\r\n        varying float vClusterActive;\r\n        varying float vFilteredActive;\r\n        varying float vGreyTransparency;\r\n        varying float vImageTransparency;\r\n        void main() {\r\n          vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\r\n          vec4 tex = texture2D( texture, uv * repeat + vOffset );\r\n          // make transparent images\r\n          if ( tex.a < 0.003 ) discard;\r\n\r\n          // Display clusters\r\n          vec4 replace_color = vec4(vCluster,1.0);\r\n          vec4 default_border_color = vec4(0.00392156863,0.00392156863,0.00392156863,0.0);\r\n          vec4 diff = tex - default_border_color;\r\n          float equality = float(dot(diff,diff) < 0.99 && vClusterActive > 0.9);\r\n          tex = mix( tex, replace_color, equality);\r\n           \r\n          // make transparent images\r\n          tex = mix( tex,  vec4(0.0,0.0,0.0,0.0), vImageTransparency);\r\n\r\n          // Grey images filter our selection \r\n          vec4 filterout_color = vec4(0.3,0.3,0.3,vGreyTransparency);\r\n          float filterout_equality = float(vFilteredActive > 0.9);\r\n          tex = mix( tex, filterout_color, filterout_equality );\r\n          gl_FragColor = tex; //* vec4(vColor, 1.0);\r\n        }`;\r\n\r\n      // material\r\n      let material = new THREE.ShaderMaterial({\r\n        uniforms: uniforms,\r\n        vertexShader: vertex_shader,\r\n        fragmentShader: fragment_shader,\r\n        transparent: true\r\n      });\r\n\r\n      // point cloud\r\n      let point_cloud = new THREE.Points(geometry, material);\r\n      point_cloud.userData = { sprite_index: c };\r\n      this.pointsAr.push(point_cloud);\r\n      // console.log(\"new points\")\r\n      point_group.add(point_cloud);\r\n    }\r\n    this.scene.add(point_group);\r\n  }\r\n\r\n  addBlankHighlightPoints() {\r\n    let hover_container = new THREE.Group();\r\n    this.scene.add(hover_container);\r\n\r\n    let vert = new THREE.Vector3(0, 0, 0);\r\n    let vertices = [vert];\r\n    let geometry = new THREE.BufferGeometry();\r\n    let numVertices = vertices.length;\r\n    var positionAr = new Float32Array(numVertices * 3); // 3 coordinates per point\r\n    var offsetAr = new Float32Array(numVertices * 2); // 2 coordinates per point\r\n    geometry.addAttribute('position', new THREE.BufferAttribute(positionAr, 3));\r\n    geometry.addAttribute('offset', new THREE.BufferAttribute(offsetAr, 2));\r\n\r\n    // all the attributes will be filled on hover\r\n    let texture_subsize = 1 / this.props.settings.sprite_side;\r\n\r\n    // uniforms\r\n    let uniforms = {\r\n      texture: { value: this.textures[0] },\r\n      repeat: { value: new THREE.Vector2(texture_subsize, texture_subsize) },\r\n      size: { value: 120.0 }, //56\r\n    };\r\n\r\n    let vertex_shader = `\r\n        attribute vec2 offset;\r\n        varying vec2 vOffset;\r\n        uniform float size;\r\n        void main() {\r\n          vOffset = offset;\r\n          gl_PointSize = size;\r\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n        }`;\r\n\r\n    let fragment_shader = `\r\n        uniform sampler2D texture;\r\n        uniform vec2 repeat;\r\n        varying vec2 vOffset;\r\n        void main() {\r\n          vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\r\n          vec4 tex = texture2D( texture, uv * repeat + vOffset );\r\n          gl_FragColor = tex;\r\n        }`;\r\n\r\n    // material\r\n    var material = new THREE.ShaderMaterial({\r\n      uniforms: uniforms,\r\n      vertexShader: vertex_shader,\r\n      fragmentShader: fragment_shader,\r\n      transparent: true,\r\n    });\r\n\r\n    let point = new THREE.Points(geometry, material);\r\n    point.frustumCulled = false;\r\n\r\n    this.scene.children[1].visible = false;\r\n    this.scene.children[1].add(point);\r\n  }\r\n\r\n  // filter images - update color of images to get inactive (grey) or active images\r\n  updateProjection=(ar)=>{\r\n    this.filterAr = ar;\r\n    let ranges = [];\r\n    let ar_sliced = [];\r\n    for (let i = 0; i < this.props.settings.sprite_number; i++) {\r\n      let start = i * this.sprite_size;\r\n      let end = (i + 1) * this.sprite_size;\r\n      if (i === this.props.settings.sprite_number - 1) end = this.props.settings.sprite_number * this.sprite_size;\r\n      ranges.push([start, end]);\r\n      ar_sliced.push(ar.slice(start, end));\r\n    }\r\n    // \r\n    for (let c = 0; c < this.props.settings.sprite_number; c++) {\r\n      let points = this.scene.children[0].children[c];\r\n      points.geometry.attributes.filteredActive = new THREE.BufferAttribute(\r\n        ar_sliced[c],\r\n        1\r\n      );\r\n      points.geometry.attributes.filteredActive.needsUpdate = true;\r\n    }\r\n    // let point = this.scene.children[0].children[0]\r\n    // console.log(point.geometry);\r\n  }\r\n\r\n  updatePass2Shader=(num)=>{\r\n    for (let c = 0; c < this.props.settings.sprite_number; c++) {\r\n      let points = this.scene.children[0].children[c];\r\n      if(num===1){\r\n        points.material.uniforms.greyTransparency.value = 0.1;\r\n        points.material.uniforms.greyTransparency.needsUpdate = true;\r\n        points.material.uniforms.imageTransparency.value = 1.0;\r\n        points.material.uniforms.imageTransparency.needsUpdate = true;\r\n      }\r\n      if(num===2){\r\n        points.material.uniforms.greyTransparency.value = 0.0;\r\n        points.material.uniforms.greyTransparency.needsUpdate = true;\r\n        points.material.uniforms.imageTransparency.value = 0.0;\r\n        points.material.uniforms.imageTransparency.needsUpdate = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  updateClusterColors=(clusterSelected)=>{\r\n    console.log('updateClusterColors',clusterSelected);\r\n    \r\n    let numVertices =  this.props.metadata.length;//this.props.settings.sprite_number * this.sprite_size;\r\n    console.log(\"clusterSelected:\",clusterSelected, \"numVertices Update -->\",numVertices, ' metadata.length:', this.props.metadata.length)\r\n    let clusters = new Float32Array(numVertices * 3);\r\n    //let clustersActive = new Float32Array(numVertices );\r\n    let clusterColors = this.props.settings.clusters.clusterColors;\r\n    console.log(numVertices,clusterSelected !==\"-\",this.props.settings.total,clusterColors);\r\n    \r\n    let ranges = [];\r\n    // let clustersActiveAr_sliced = [];\r\n    let clustersAr_sliced = [];\r\n\r\n    if( clusterSelected !==\"disabled\" ){\r\n      let cluster_unique = [];\r\n      for (let i = 0, index = 0, l = numVertices; i < l; i++, index += 1) {\r\n          let clusterId = this.props.metadata[index][clusterSelected];\r\n          // check if clusterId is in cluster_unique\r\n          if(cluster_unique.indexOf(clusterId) === -1){\r\n            cluster_unique.push(clusterId);\r\n          }\r\n          // get the index of the clusterId in cluster_unique\r\n          let cluster_int = cluster_unique.indexOf(clusterId);\r\n          if(cluster_int>=clusterColors.length){\r\n            // make a random color\r\n            clusters[index*3] = Math.random();\r\n            clusters[index*3 + 1] = Math.random();\r\n            clusters[index*3 + 2] = Math.random();\r\n          }else{\r\n            clusters[index*3] = clusterColors[cluster_int][0];\r\n            clusters[index*3 + 1] = clusterColors[cluster_int][1];\r\n            clusters[index*3 + 2] = clusterColors[cluster_int][2];\r\n          }\r\n          \r\n      }\r\n\r\n      for (let i = 0; i < this.props.settings.sprite_number; i++) {\r\n        let start = i * this.sprite_size;\r\n        let end = (i + 1) * this.sprite_size;\r\n        if (i === this.props.settings.sprite_number - 1) end = this.props.settings.sprite_number * this.sprite_size;\r\n        ranges.push([start, end]);\r\n        clustersAr_sliced.push(clusters.slice(start*3, end*3));\r\n      }\r\n    }\r\n    \r\n    for (let c = 0; c < this.props.settings.sprite_number; c++) {\r\n      let points = this.scene.children[0].children[c];\r\n      if( clusterSelected !==\"disabled\" ){\r\n        points.geometry.attributes.cluster = new THREE.BufferAttribute(\r\n          clustersAr_sliced[c],\r\n          3\r\n        );\r\n        points.geometry.attributes.cluster.needsUpdate = true;\r\n        \r\n        points.material.uniforms.clusterActive.value = 1.0;\r\n        points.material.uniforms.clusterActive.needsUpdate = true;\r\n      }else{\r\n        points.material.uniforms.clusterActive.value = 0.0;\r\n        points.material.uniforms.clusterActive.needsUpdate = true;\r\n      }\r\n    }\r\n\r\n\r\n  }\r\n\r\n  highlightPoint(sprite_index, digit_index, full_index) {    \r\n    let { algorithm_choice, mappings } = this.props;\r\n\r\n    let point = this.scene.children[1].children[0];\r\n\r\n    // console.log(mappings[algorithm_choice][full_index]);\r\n    let embedding = mappings[algorithm_choice][full_index];\r\n\r\n    let vert = new THREE.Vector3(embedding[0], embedding[1], 0);\r\n    let vertices = [vert];\r\n\r\n    var offsets = new Float32Array(2); // 2 coordinates per point\r\n\r\n    let x = ((digit_index % this.props.settings.sprite_side) * this.props.settings.sprite_image_size) / 2048;\r\n    let y = (Math.floor(digit_index / this.props.settings.sprite_side) * this.props.settings.sprite_image_size) / 2048;\r\n    offsets[0] = x;\r\n    offsets[1] = y;\r\n\r\n    point.geometry.attributes.position.copyVector3sArray(vertices);\r\n    point.geometry.attributes.position.needsUpdate = true; // required after the first render\r\n    point.geometry.attributes.offset.array = offsets;\r\n    point.geometry.attributes.offset.needsUpdate = true; // required after the first render\r\n\r\n    // need to set attributes on geometry and uniforms on material\r\n    point.material.uniforms.texture.value = this.textures[sprite_index];\r\n  }\r\n\r\n  removeHighlights() {\r\n    let highlight_container = this.scene.children[1];\r\n    let highlights = highlight_container.children;\r\n    highlight_container.remove(...highlights);\r\n  }\r\n\r\n  checkIntersects(mouse_position) {\r\n    let { width, height, previewPane_ctx, previewPane_image_size } = this.props;\r\n\r\n    function mouseToThree([mouseX, mouseY]) {\r\n      return new THREE.Vector3(\r\n        (mouseX / width) * 2 - 1,\r\n        -(mouseY / height) * 2 + 1,\r\n        1\r\n      );\r\n    }\r\n\r\n    function sortIntersectsByDistanceToRay(intersects) {\r\n      return _.sortBy(intersects, 'distanceToRay');\r\n    }\r\n\r\n    let mouse_vector = mouseToThree(mouse_position);\r\n    this.raycaster.setFromCamera(mouse_vector, this.camera);\r\n    this.raycaster.params.Points.threshold = 0.25;\r\n    let intersects = this.raycaster.intersectObjects(\r\n      this.scene.children[0].children\r\n    );\r\n    if (intersects[0]) {\r\n      let sorted_intersects = sortIntersectsByDistanceToRay(intersects);\r\n      let intersect = sorted_intersects[0];\r\n      let sprite_index = intersect.object.userData.sprite_index;\r\n      let digit_index = intersect.index;\r\n      let full_index = sprite_index * this.sprite_size + digit_index;\r\n      // if filter is null then allow selected all, then when filter is defined only allow visible image to be selected\r\n      if( this.filterAr===undefined || this.filterAr[full_index]<1.0){\r\n        this.props.setHoverIndex(full_index);\r\n        // console.log(full_index)\r\n        this.highlightPoint(sprite_index, digit_index, full_index);\r\n        this.scene.children[1].visible = true;\r\n        previewPane_ctx.clearRect(0, 0,  previewPane_image_size, previewPane_image_size);\r\n        previewPane_ctx.fillRect(0, 0, previewPane_image_size, previewPane_image_size);\r\n        previewPane_ctx.fillStyle = \"transparent\";\r\n        try{\r\n          previewPane_ctx.drawImage(\r\n            this.datasetIMG[sprite_index],\r\n            // source rectangle\r\n            (digit_index % this.props.settings.sprite_side) * this.props.settings.sprite_image_size,\r\n            Math.floor(digit_index / this.props.settings.sprite_side) * this.props.settings.sprite_image_size,\r\n            this.props.settings.sprite_image_size,\r\n            this.props.settings.sprite_image_size,\r\n            // destination rectangle\r\n            0,\r\n            0,\r\n            previewPane_image_size,\r\n            previewPane_image_size\r\n          );\r\n        }catch (error){\r\n          console.log(\"previewPane_ctx.drawImage\",error);\r\n        }\r\n      }\r\n    } else {\r\n      this.props.setHoverIndex(null);\r\n      this.scene.children[1].visible = false;\r\n      previewPane_ctx.fillRect(0, 0, previewPane_image_size, previewPane_image_size);\r\n      previewPane_ctx.fillStyle = \"transparent\";\r\n    }\r\n  }\r\n\r\n  handleMouse() {\r\n    let view = d3.select(this.renderer.domElement);\r\n    this.raycaster = new THREE.Raycaster();\r\n\r\n    view.on('mousemove', () => {\r\n      let [mouseX, mouseY] = d3.mouse(view.node());\r\n      let mouse_position = [mouseX, mouseY];\r\n      this.checkIntersects(mouse_position);\r\n    })\r\n    \r\n    view.on('dblclick', () => {\r\n      if(this.scene.children[1].visible) this.props.clickOnImage();\r\n    })\r\n  }\r\n\r\n  init() {\r\n    let { width, height } = this.props;\r\n    this.scene = new THREE.Scene();\r\n    let vFOV = 75;\r\n    let aspect = width / height;\r\n    let near = 0.01;\r\n    let far = 1000;\r\n\r\n    this.camera = new THREE.PerspectiveCamera(vFOV, aspect, near, far);\r\n\r\n    this.renderer = new THREE.WebGLRenderer({ preserveDrawingBuffer: true,alpha: true });\r\n    this.renderer.setClearColor(0xffffff, 0);\r\n    this.renderer.autoClear = false;\r\n    this.renderer.setSize(width, height);\r\n    this.renderer.domElement.id = \"threeCanvas\";\r\n    this.mount.appendChild(this.renderer.domElement);\r\n\r\n    this.addPoints();\r\n    this.addBlankHighlightPoints();\r\n    this.setupCamera();\r\n    this.animate();\r\n    this.handleMouse();\r\n    this.changeEmbeddings(this.props.algorithm_choice);\r\n  }\r\n\r\n  animate() {\r\n    requestAnimationFrame(this.animate);\r\n    TWEEN.update();\r\n    this.renderer.clear()\r\n    // 1-Pass :: Render filtered images (grey semi-transparent images that create a shadow behind)\r\n    if(parseInt(this.props.greyRenderTypeSelected)===0){\r\n      this.updatePass2Shader(1)\r\n      this.renderer.render(this.scene, this.camera);\r\n    }\r\n    // 2-Pass - Render all images\r\n    this.updatePass2Shader(2)\r\n    this.renderer.render(this.scene, this.camera);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.init();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    let { width, height } = this.props;\r\n    if (width !== prevProps.width || height !== prevProps.height) {\r\n      this.handleResize(width, height);\r\n    }\r\n    \r\n    if (prevProps.algorithm_choice !== this.props.algorithm_choice) {\r\n      this.changeEmbeddings(\r\n        //prevProps.algorithm_choice,\r\n        this.props.algorithm_choice,\r\n      );\r\n    }\r\n    \r\n    if (this.props.scaleMin !== prevProps.scaleMin || this.props.scaleMax !== prevProps.scaleMax){\r\n      this.handleResize(width, height);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.mount.removeChild(this.renderer.domElement);\r\n  }\r\n\r\n  render() {\r\n    let { width, height } = this.props;\r\n    const tileProgress = this.state.tilesLoaded;\r\n    const allTiles = this.props.settings.sprite_number;\r\n    return (\r\n      <><div>\r\n        {tileProgress < 1 ? <div className=\"loading\"><CircularProgress color=\"inherit\"/><div>loading tiles...</div></div> : \r\n        tileProgress < allTiles-1 ? <div className=\"loading-small\"><CircularProgress color=\"inherit\"/><div>loading...</div></div> : \r\n        ''\r\n      }\r\n      </div><div\r\n          style={{ width: width, height: height, overflow: 'hidden' }}\r\n          ref={mount => {\r\n            this.mount = mount\r\n          } } /></>\r\n    ) \r\n  }\r\n}\r\n\r\nexport default React.memo(Projection)\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport PreviewPane from './PreviewPane'\r\nimport SliderPane from './SliderPane'\r\nimport FilterPane from './FilterPane'\r\nimport InfoPane from './InfoPane'\r\nimport ViewPane from './ViewPane'\r\nimport MappingsPane from './MappingsPane'\r\nimport Export from './Export'\r\nimport { ProSidebar, Menu, MenuItem, SubMenu } from 'react-pro-sidebar';\r\nimport './scss/Menu.scss';\r\nimport Projection from './Projection'\r\nimport * as _ from 'lodash'\r\nimport { CircularProgress } from \"@material-ui/core\";\r\nimport { FaDatabase, FaSlidersH, FaSearch, FaCloudDownloadAlt, FaAngleDoubleLeft, FaAngleDoubleRight, FaRegImage, FaInfo, FaQuestion, FaEye } from \"react-icons/fa\";\r\n\r\nclass Layout extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    let total = this.props.settings[\"total\"]\r\n    this.state = {\r\n      ww: null,\r\n      wh: null,\r\n      hover_index: 0,\r\n      previewPane_height: null,\r\n      controlPane_height: null,\r\n      filterPane_height: null,\r\n      algorithm_choice: null,\r\n      allFilter: {},\r\n      currentProjection: new Float32Array(total).fill(0),\r\n      currentFilter: new Float32Array(total).fill(0),\r\n      currentSearch: new Float32Array(total).fill(0),\r\n      scaleMin: 14,\r\n      scaleMax: 70,\r\n      filterGrey: true,\r\n      clusterTypeSelected:'-',\r\n      greyRenderTypeSelected:0,\r\n      dimensions: {},\r\n      collapsedControl: false,\r\n      collapsedObject: false\r\n    }\r\n    this.previewPane_ctx = null;\r\n    this.setSize = _.debounce(this.setSize.bind(this), 200);\r\n    this.setPreviewPaneCanvas = this.setPreviewPaneCanvas.bind(this);\r\n    this.setPreviewImage = this.setPreviewImage.bind(this);\r\n    this.selectAlgorithm = this.selectAlgorithm.bind(this);\r\n    this.selectDataset = this.selectDataset.bind(this);\r\n    this.toggleControl = this.toggleControl.bind(this);\r\n    this.refProjection = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setDefaults();\r\n    this.selectAlgorithm(this.props.algorithm_name);\r\n    this.setSize();\r\n    window.addEventListener('resize', this.setSize);\r\n  }\r\n\r\n  setDefaults(){\r\n    if (this.props.settings[\"total\"] < 20000) {\r\n      this.setState( { scaleMin: 15, filterGrey: true, greyRenderTypeSelected: 0 } )\r\n    } else {\r\n      this.setState( { scaleMin: 5, filterGrey: false, greyRenderTypeSelected: 1 } )\r\n    }\r\n  }\r\n\r\n  setRenderer(renderer){\r\n    this.setState( { renderer: renderer});\r\n  }\r\n\r\n  handleChangeScale(e,val) {\r\n    this.setState({ scaleMin: val})\r\n  }\r\n\r\n  handleChangeZoom(e,val) {\r\n    this.setState({ scaleMax: val})\r\n  }\r\n\r\n  handleChangeCluster(e) {\r\n    let value = e.target.value;\r\n    this.setState({ clusterTypeSelected: parseInt(value)})\r\n    console.log(e.target)\r\n    try{\r\n      this.refProjection.current.updateClusterColors(value)\r\n    } catch(error) {console.log(\"error updateClusterColors\")}\r\n  }\r\n\r\n  handleChangeGrey(value) {\r\n    this.setState({ greyRenderTypeSelected: value})\r\n  }\r\n\r\n  calculateProjection=(newArr,type, update)=>{\r\n    let A, B, arr;\r\n    if(type===\"filter\"){\r\n      this.setState({currentFilter: newArr})\r\n      A = newArr;\r\n      B = this.state.currentSearch;\r\n    }\r\n    if(type===\"search\"){\r\n      this.setState({currentSearch: newArr});\r\n      A = this.state.currentFilter;\r\n      B = newArr;\r\n    }\r\n    if(update){\r\n      arr = A.map((x, idx) => x + B[idx]);\r\n      this.setState({currentProjection: arr});\r\n    } else {\r\n      arr = newArr;\r\n    }\r\n    try{\r\n      this.refProjection.current.updateProjection(arr);\r\n    } catch(error) {}\r\n    }\r\n\r\n  selectAlgorithm(v) {\r\n    let i = this.props.algorithm_options.indexOf(v);\r\n    if(i<0) i = 0;\r\n    this.setState({ algorithm_choice: i });\r\n    // Save algorithm in URL parameters\r\n    this.props.addToUrl('projection',this.props.algorithm_options[i]);\r\n  }\r\n\r\n  selectDataset(p) {\r\n    this.props.changeDataset(p);\r\n  }\r\n\r\n  setSize() {\r\n    this.setState({ ww: window.innerWidth, wh: window.innerHeight });\r\n    let previewPane_height = this.previewPane_mount.offsetHeight;\r\n    this.setState({ previewPane_height: previewPane_height });\r\n    if (this.previewPane_ctx) this.previewPane_ctx.imageSmoothingEnabled = false;\r\n    if ( window.innerWidth < 900) {\r\n      this.setState({ collapsedControl: true, collapsedObject: true })\r\n    } else {\r\n      this.setState({ collapsedControl: false, collapsedObject: false })\r\n\r\n    }\r\n  }\r\n\r\n  setPreviewPaneCanvas(canvas) {\r\n    let ctx = canvas.getContext('2d');\r\n    ctx.imageSmoothingEnabled = false;\r\n    this.previewPane_ctx = ctx;\r\n    console.log(ctx);\r\n  }\r\n\r\n  setPreviewImage() {\r\n      return (\r\n      <img\r\n      src={ this.props.settings.url_prefix + this.props.metadata[this.state.hover_index].filename }\r\n      alt=\"preview\"\r\n      style={{\r\n        verticalAlign: \"middle\",\r\n      }}\r\n      />)\r\n  }\r\n\r\n\r\n  setHoverIndex(hover_index) {\r\n    if (hover_index != null){\r\n      this.setState({ hover_index: hover_index });\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.setSize);\r\n  }\r\n\r\n  clickOnImage(){\r\n    console.log(\"open image\",this.state.hover_index);\r\n    try{\r\n      let url = this.props.metadata[this.state.hover_index].link_URL\r\n      window.open(url, '_blank', 'noopener,noreferrer');\r\n    }catch(err){}\r\n  }\r\n\r\n  toggleControl = () => {\r\n    this.setState({ collapsedControl: !this.state.collapsedControl \r\n  })}\r\n  \r\n  toggleObject = () => {\r\n    this.setState({ collapsedObject: !this.state.collapsedObject \r\n  })}\r\n\r\n\r\n  render() {\r\n    let {\r\n      embeddings_data,\r\n      mappings,\r\n      algorithm_options,\r\n      dataset_options,\r\n      metadata,\r\n      settings,\r\n      barData\r\n    } = this.props;\r\n\r\n    let {\r\n      ww,\r\n      wh,\r\n      hover_index,\r\n      algorithm_choice,\r\n      currentProjection,\r\n      allFilter,\r\n      greyRenderTypeSelected,\r\n      clusterTypeSelected,\r\n      collapsedControl,\r\n      collapsedObject\r\n    } = this.state;\r\n\r\n    let previewPane_ctx = this.previewPane_ctx;\r\n    \r\n    let line_height = 1.5;\r\n\r\n    let previewPane_style = {\r\n      position: 'absolute',\r\n      left: 0,\r\n      top: 0,\r\n      // width: 320,\r\n      height: 'auto',\r\n      maxHeight: '100vh',\r\n      overflow: 'auto',\r\n      background: '#222',\r\n      zIndex: 8\r\n    };\r\n    let controlMenu_style = {\r\n      position: 'absolute',\r\n      right: 0,\r\n      top: 0,\r\n      // width: 300,\r\n      // left:ww-350,\r\n      height: 'auto',\r\n      maxHeight: '100vh',\r\n      overflow: 'auto',\r\n      background: '#222',\r\n      zIndex: 8\r\n    };\r\n\r\n    let main_style = {\r\n      position: 'relative',\r\n      background: '#111',\r\n      overflow: 'hidden',\r\n      width: ww, \r\n      height: wh\r\n    };\r\n\r\n    let previewPane_image_size = '320px';\r\n    let font_size = 16;\r\n\r\n    let grem = font_size * line_height;\r\n\r\n    let general_style = {\r\n      fontSize: font_size,\r\n      lineHeight: line_height,\r\n    };\r\n\r\n    let displayNumb = 0;\r\n    for(let i=0;i<settings.total;i++){\r\n      if(currentProjection[i]===0){\r\n        displayNumb++;\r\n      }\r\n    }\r\n\r\n\r\n    return ww !== null ? (\r\n      <div style={general_style}>\r\n        <div\r\n          style={controlMenu_style}\r\n          ref={controlMenu_mount => {\r\n            this.controlMenu_mount = controlMenu_mount\r\n          }}\r\n        >\r\n          <div>\r\n          <ProSidebar collapsed={collapsedControl}>\r\n            <Menu iconShape='square'>\r\n            <MenuItem>\r\n            <h3></h3>\r\n            <a className=\"collapseCon\" onClick={this.toggleControl}>{collapsedControl ? < FaAngleDoubleLeft />  : < FaAngleDoubleRight /> }</a>\r\n            </MenuItem>\r\n\r\n              <SubMenu defaultOpen\r\n              title={collapsedControl ? null : \"Data & Projections\"}  \r\n              icon={collapsedControl ? < FaDatabase />  : null }\r\n              >\r\n              <MenuItem>\r\n              <MappingsPane\r\n                grem={grem}\r\n                algorithm_options={algorithm_options}\r\n                algorithm_choice={algorithm_choice}\r\n                selectAlgorithm={this.selectAlgorithm}\r\n                dataset_options={dataset_options}\r\n                selectDataset={this.selectDataset}\r\n                selectedDataset={this.props.selectedDataset}\r\n                datasetInfo={settings[\"datasetInfo\"]}\r\n              />\r\n              </MenuItem>\r\n              </SubMenu>\r\n              <SubMenu defaultOpen\r\n              title={collapsedControl ? null : \"Dimension Filters\"}  \r\n              icon={collapsedControl ? <FaSlidersH />  : null }\r\n              >\r\n\r\n\r\n                <MenuItem>\r\n                <SliderPane\r\n                grem={grem}\r\n                metadata={metadata}\r\n                hover_index={hover_index}\r\n                settings={settings}\r\n                barData={barData}\r\n                calculateProjection={this.calculateProjection}\r\n                currentProjection={currentProjection}\r\n                allFilter={allFilter}\r\n                />\r\n                </MenuItem>\r\n                </SubMenu>\r\n\r\n                <SubMenu\r\n                title={collapsedControl ? null : \"Advanced Filters\"}  \r\n                icon={collapsedControl ? < FaSearch />  : null }\r\n                >\r\n\r\n                <MenuItem>\r\n                  <FilterPane\r\n                    grem={grem}\r\n                    calculateProjection={this.calculateProjection}\r\n                    hover_index={hover_index}\r\n                    settings={settings}\r\n                    metadata={metadata}\r\n                    currentProjection={currentProjection}\r\n                    allFilter={allFilter}\r\n                  />\r\n                </MenuItem>\r\n              </SubMenu>\r\n              <SubMenu\r\n                title={collapsedControl ? null : \"Export Filtered Data\"}  \r\n                icon={collapsedControl ? <FaCloudDownloadAlt />  : null }\r\n                >\r\n\r\n              <MenuItem>\r\n                <Export\r\n                metadata = {metadata}\r\n                currentProjection = {currentProjection}\r\n                />\r\n              </MenuItem>\r\n            </SubMenu>\r\n            </Menu>\r\n          </ProSidebar>\r\n          </div>\r\n        </div>    \r\n\r\n        <div\r\n          style={previewPane_style}\r\n          ref={previewPane_mount => {\r\n            this.previewPane_mount = previewPane_mount\r\n          }}\r\n        >\r\n\r\n        <div>\r\n          <ProSidebar collapsed={collapsedObject}>\r\n            <Menu iconShape='square'>   \r\n            <MenuItem>\r\n            {collapsedObject ? <h3></h3> : <h3>Collection Space Navigator</h3> }\r\n            <a className='collapseObj' onClick={this.toggleObject}>{collapsedObject ? < FaAngleDoubleRight />  : < FaAngleDoubleLeft /> }</a>\r\n            </MenuItem>\r\n              <SubMenu defaultOpen\r\n                title={collapsedObject ? null : \"Object Preview\"}  \r\n                icon={collapsedObject ? <FaRegImage />  : null }\r\n                >  \r\n                <PreviewPane\r\n                  previewPane_image_size={previewPane_image_size}\r\n                  setPreviewPaneCanvas={this.setPreviewPaneCanvas}\r\n                  setPreviewImage={this.setPreviewImage}\r\n                  hover_index={hover_index}\r\n                />\r\n              </SubMenu>\r\n              <SubMenu defaultOpen\r\n                title={collapsedObject ? null : \"Object Info\"}  \r\n                icon={collapsedObject ? <FaInfo />  : null }\r\n                >  \r\n                <MenuItem>\r\n                <InfoPane\r\n                  hover_index={hover_index}\r\n                  metadata={metadata}\r\n                  infos={settings.info}\r\n                />\r\n                </MenuItem>\r\n              </SubMenu>\r\n\r\n              <SubMenu\r\n                title={collapsedObject ? null : \"Object Appearance\"}  \r\n                icon={collapsedObject ? <FaEye />  : null }\r\n                > \r\n                <MenuItem>\r\n                <ViewPane\r\n                  clusters={settings.clusters}\r\n                  scaleMin={this.state.scaleMin}\r\n                  scaleMax={this.state.scaleMax}\r\n                  filterGrey={this.state.filterGrey}\r\n                  handleChangeScale = {this.handleChangeScale.bind(this)}\r\n                  handleChangeZoom = {this.handleChangeZoom.bind(this)}\r\n                  handleChangeCluster = {this.handleChangeCluster.bind(this)}\r\n                  handleChangeGrey = {this.handleChangeGrey.bind(this)}\r\n                  total = {settings.total}\r\n                />\r\n                </MenuItem>\r\n                <MenuItem>\r\n                <div className='info'>showing {displayNumb} / {settings.total}</div>\r\n              </MenuItem>\r\n              </SubMenu>\r\n\r\n            <SubMenu\r\n              title={collapsedObject ? null : 'About'}  \r\n              icon={collapsedObject ? <FaQuestion />  : null }\r\n              >         \r\n              <div className='about'>\r\n                The Collection Space Navigator (CSN) is an <strong>interactive visualization interface for multidimensional datasets</strong>.\r\n                It functions as an explorative visualization tool for researching collections and their multidimensional representations. \r\n                We designed this tool to better understand multidimensional data, its methods, and semantic qualities through spatial navigation and filtering. \r\n                CSN can be used with any image collection and can be customized for specific research needs. <a href=\"https://github.com/Collection-Space-Navigator/CSN\" target=\"_blank\" rel=\"noreferrer\" ><strong>[more on GitHub...]</strong></a>\r\n              </div>\r\n              </SubMenu>\r\n            </Menu>\r\n          </ProSidebar>\r\n          </div>\r\n        </div>\r\n        <div style={main_style}>\r\n          <Projection\r\n            ref={this.refProjection}\r\n            width={main_style.width}\r\n            height={main_style.height}\r\n            embeddings_data={embeddings_data}\r\n            mappings={mappings}\r\n            metadata={metadata}\r\n            previewPane_ctx={previewPane_ctx}\r\n            previewPane_image_size={previewPane_image_size}\r\n            setHoverIndex={this.setHoverIndex.bind(this)}\r\n            algorithm_choice={algorithm_choice}\r\n            datasetDir={this.props.datasetDir}\r\n            clusterTypeSelected={clusterTypeSelected}\r\n            greyRenderTypeSelected={greyRenderTypeSelected}\r\n            settings={settings}\r\n            initPath={this.props.initPath}\r\n            scaleMin={this.state.scaleMin}\r\n            scaleMax={this.state.scaleMax}\r\n            currentProjection={currentProjection}\r\n            clickOnImage={this.clickOnImage.bind(this)}\r\n            // tiles={this.tiles}\r\n          />\r\n        </div>\r\n      </div>\r\n      \r\n    ) : (\r\n      <div className=\"loading\"><CircularProgress color=\"inherit\"/><div>loading layout...</div></div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Layout\r\n\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport {useParams, useNavigate} from \"react-router-dom\";\r\nimport Layout from './Layout'\r\nimport * as _ from 'lodash'\r\nimport * as d3 from 'd3'\r\nimport color from 'color'\r\n// import * as THREE from 'three'\r\nimport { CircularProgress } from \"@material-ui/core\";\r\n\r\n\r\nfunction withRouter(Component) {\r\n  return props => <Component {...props} params={useParams()} navigate={useNavigate()} />;\r\n}\r\n\r\nclass Data extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      // tilesLoaded: 0,\r\n      algorithm_options: null,\r\n      dataset_options: null,\r\n      dataset_dirs: null,\r\n      embeddings_data: null,\r\n      mappings: null,\r\n      metadata:null,\r\n      defaultDataset:null,\r\n      algorithm_name:0\r\n    };\r\n  }\r\n\r\n  scaleEmbeddings(embeddings) {\r\n    let xs = embeddings.map(e => Math.abs(e[0]));\r\n    let ys = embeddings.map(e => Math.abs(e[1]));\r\n    let max_x = _.max(xs);\r\n    let max_y = _.max(ys);\r\n    let max = Math.max(max_x, max_y);\r\n    let scale = d3\r\n      .scaleLinear()\r\n      .domain([-max, max])\r\n      .range([-20, 20]);\r\n    let scaled_embeddings = embeddings.map(e => [scale(e[0]), scale(e[1])]);\r\n    return scaled_embeddings;\r\n  }\r\n  \r\n  componentDidMount() {\r\n    // Get parameters from URL and save to settings\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    this.setState({ selectedDataset: urlParams.get('dataset')});\r\n    if(urlParams.get('projection')!==undefined) this.setState({algorithm_name:urlParams.get('projection')});\r\n    // Load embeddings\r\n    this.loadInit('datasets/datasets_config.json')\r\n  }\r\n\r\n  loadConfig(path){\r\n    this.loadSettings(`datasets/${path}/config.json`);\r\n    this.loadBarData(`datasets/${path}/barData.json`);\r\n    this.loadMetadata(`datasets/${path}/metadata.json`);\r\n  }\r\n  \r\n  prepareMappings(ID){\r\n    let algorithm_options = [];\r\n    for (let i in this.state.settings.embeddings) {\r\n      console.log(this.state.settings.embeddings[i].name);\r\n      algorithm_options[i] = this.state.settings.embeddings[i].name;\r\n    }\r\n    this.setState({ algorithm_options: algorithm_options });\r\n  }\r\n\r\n  loadDataset(ID){\r\n    let mappings = [];\r\n    const embeddings = this.state.settings.embeddings;\r\n    for (let i in embeddings) {\r\n      // console.log(embeddings[i].key);\r\n      fetch(`${process.env.PUBLIC_URL}/datasets/${this.state.datasetDir}/${embeddings[i].file}`)\r\n        .then(response => response.json())\r\n        .then(embeddings_data => {\r\n          let scaled_embeddings = embeddings_data;\r\n          // this.scaleEmbeddings(embeddings_data);\r\n          mappings[i] = scaled_embeddings;\r\n        }\r\n        )\r\n        .then(() => {\r\n          this.setState({ mappings: mappings, embeddings_data: mappings[0] })\r\n        })\r\n  }\r\n}\r\n\r\n  // loadTiles(){ \r\n  //   const tile_locations = [...Array(this.state.settings.sprite_number)].map(\r\n  //     (n, i) => `${process.env.PUBLIC_URL}/datasets/${this.state.datasetDir}/tile_${i}.png`\r\n  //   )\r\n  //   let loader = new THREE.TextureLoader();\r\n  //   this.tiles = tile_locations.map(l => {\r\n  //     let t = loader.load(l,\r\n  //       function ( texture ) {\r\n  //         this.setState({ tilesLoaded: this.state.tilesLoaded+1 });\r\n  //       }.bind(this)\r\n  //     )\r\n  //     t.flipY = false\r\n  //     t.magFilter = THREE.NearestFilter\r\n  //     return t\r\n  //   })    \r\n  // }\r\n\r\n\r\n  addToUrl(paramName,value){\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    urlParams.set(paramName, value);\r\n    this.props.navigate(\"?\"+urlParams.toString());\r\n  }\r\n\r\n  prepareDatasets(ID){\r\n    let dataset_options = [];\r\n    let dataset_dirs = [];\r\n    for (let i in this.state.settings.embeddings) {\r\n      console.log(this.state.settings.embeddings[i].name);\r\n      dataset_options[i] = this.state.settings.embeddings[i].name;\r\n      dataset_dirs[i] = this.state.settings.embeddings[i].directory;\r\n    }\r\n    this.setState({ dataset_options: dataset_options, dataset_dirs: dataset_dirs });\r\n  }\r\n\r\n  changeDataset(choice){\r\n    this.addToUrl('dataset',choice);\r\n    let k = this.state.dataset_options.indexOf(choice);\r\n    let newDataset = this.state.dataset_dirs[k]\r\n    this.setState({ \r\n      selectedDataset: choice, \r\n      datasetDir: newDataset,\r\n      algorithm_options: null,\r\n      embeddings_data: null,\r\n      mappings: null,\r\n      metadata: null\r\n    });\r\n    this.loadConfig(newDataset);\r\n  }\r\n\r\n  loadInit(file){\r\n    fetch(`${process.env.PUBLIC_URL}/`+file)\r\n      .then(response => response.json())\r\n      .then(init =>{\r\n        let dataset_options = [];\r\n        let dataset_dirs = [];\r\n        for (let i in init.data) {\r\n          console.log(init.data[i].directory);\r\n          dataset_options[i] = init.data[i].name;\r\n          dataset_dirs[i] = init.data[i].directory;\r\n        }\r\n        this.setState({ dataset_options: dataset_options,dataset_dirs: dataset_dirs});\r\n        // Select dataset folder from defined in URL parameters\r\n        if(this.state.selectedDataset===null){\r\n          this.setState({ selectedDataset: init.data[init.default].name,  datasetDir: init.data[init.default].directory});\r\n          this.addToUrl('dataset',init.data[init.default].name);\r\n        }else{\r\n          let foundInitDataset = false;\r\n          for (let i in init.data) {\r\n            if(init.data[i].name===this.state.selectedDataset){\r\n              this.setState({datasetDir: init.data[i].directory});\r\n              foundInitDataset = true;\r\n            } \r\n          }\r\n          if(!foundInitDataset) this.setState({ selectedDataset: init.data[init.default].name,  datasetDir: init.data[init.default].directory});\r\n        }\r\n      }\r\n      )\r\n      .then(()=> \r\n      this.loadConfig(this.state.datasetDir))\r\n\r\n  }\r\n\r\n  loadSettings(file){\r\n    fetch(`${process.env.PUBLIC_URL}/`+file)\r\n      .then(response => response.json())\r\n      .then(settings =>{\r\n        // Convert colors from rgb(255,0,0) to array [1.0,0.0,0.0]\r\n        try{\r\n          const floatColorConvertedArr = settings.clusters.clusterColors.map(myColorFunction);\r\n          function myColorFunction(value) {\r\n            return [color(value).rgb().array()[0]/255,color(value).rgb().array()[1]/255,color(value).rgb().array()[2]/255];\r\n          }\r\n          settings.clusters.clusterColors = floatColorConvertedArr;\r\n        }catch(error){}\r\n        // Save settings to \r\n        this.setState({\r\n          settings: settings\r\n        });\r\n      }\r\n      )\r\n      .then(() =>\r\n      this.prepareMappings(0))\r\n      .then(()=> \r\n      this.loadDataset(0))\r\n      // .then(()=> \r\n      // this.loadTiles())\r\n  }\r\n\r\n  loadMetadata(file){\r\n    fetch(`${process.env.PUBLIC_URL}/`+file)\r\n      .then(response => response.json())\r\n      .then(metadata =>\r\n        this.setState({\r\n          metadata: metadata,\r\n        })\r\n      )\r\n  }\r\n\r\n  loadBarData(file){\r\n    fetch(`${process.env.PUBLIC_URL}/`+file)\r\n      .then(response => response.json())\r\n      .then(barData =>\r\n        this.setState({\r\n          barData: barData,\r\n        })\r\n      )\r\n  }\r\n\r\n\r\n  render() {\r\n    return this.state.embeddings_data && this.state.metadata ? (\r\n\r\n      <Layout\r\n        {...this.state}\r\n        addToUrl={this.addToUrl.bind(this)}\r\n        algorithm_name={this.state.algorithm_name}\r\n        algorithm_options={this.state.algorithm_options}\r\n        dataset_options={this.state.dataset_options}\r\n        dataset_dirs={this.state.dataset_dirs}\r\n        changeDataset={this.changeDataset.bind(this)}\r\n        selectedDataset={this.state.selectedDataset}\r\n        datasetDir={this.state.datasetDir}\r\n        // tiles={this.tiles}\r\n      />\r\n\r\n    ) : (\r\n      <div className=\"loading\" ><CircularProgress color=\"inherit\"/><div>loading datasets... </div></div>\r\n      \r\n    )\r\n  }\r\n}\r\n\r\nexport default withRouter(Data)\r\n\r\n","import React from \"react\";\r\nimport {\r\n  BrowserRouter, Routes, Route\r\n} from \"react-router-dom\";\r\n\r\n// Area components\r\nimport './App.css'\r\nimport WithRouter from './Data'\r\n\r\nexport default function App() {\r\n  \r\n  return (\r\n    <BrowserRouter>\r\n      <Routes>\r\n        <Route exact path=\"/\" element={<WithRouter/>} />\r\n        <Route exact path=\"/CSN\" element={<WithRouter/>}/> \r\n      </Routes>\r\n    </BrowserRouter>\r\n  );\r\n\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}